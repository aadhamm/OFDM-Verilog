// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_Select_Puncture_Vector.v
// Created: 2023-05-02 12:36:37
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_Select_Puncture_Vector
// Source Path: whdlOFDMTx/Frame Generator/Data/Data and Control Signal Generation/Select Puncture Vector
// Hierarchy Level: 5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_Select_Puncture_Vector
          (clk,
           reset,
           enb_1_2_0,
           codeRate,
           puncVec_0,
           puncVec_1,
           puncVec_2,
           puncVec_3,
           puncVec_4,
           puncVec_5,
           puncVec_6,
           puncVec_7,
           puncVec_8,
           puncVec_9);


  input   clk;
  input   reset;
  input   enb_1_2_0;
  input   [1:0] codeRate;  // ufix2
  output  puncVec_0;  // boolean
  output  puncVec_1;  // boolean
  output  puncVec_2;  // boolean
  output  puncVec_3;  // boolean
  output  puncVec_4;  // boolean
  output  puncVec_5;  // boolean
  output  puncVec_6;  // boolean
  output  puncVec_7;  // boolean
  output  puncVec_8;  // boolean
  output  puncVec_9;  // boolean


  reg  [0:9] puncVec;  // boolean [10]
  reg  vector [0:9] [0:3];  // boolean [10x4]
  reg signed [31:0] extend_temp;  // int32
  reg signed [31:0] t_0;  // int32
  reg  t_1 [0:9] [0:3];  // boolean [10x4]
  reg [2:0] add_temp;  // ufix3
  reg [2:0] t_2;  // ufix3
  reg signed [31:0] i;  // int32
  reg signed [31:0] i2;  // int32


  always @(codeRate) begin
    t_1[0][0] = 1'b1;
    t_1[1][0] = 1'b1;
    t_1[2][0] = 1'b1;
    t_1[3][0] = 1'b1;
    t_1[4][0] = 1'b1;
    t_1[5][0] = 1'b1;
    t_1[6][0] = 1'b1;
    t_1[7][0] = 1'b1;
    t_1[8][0] = 1'b1;
    t_1[9][0] = 1'b1;
    t_1[0][1] = 1'b0;
    t_1[1][1] = 1'b0;
    t_1[2][1] = 1'b0;
    t_1[3][1] = 1'b0;
    t_1[4][1] = 1'b0;
    t_1[5][1] = 1'b0;
    t_1[6][1] = 1'b1;
    t_1[7][1] = 1'b1;
    t_1[8][1] = 1'b0;
    t_1[9][1] = 1'b1;
    t_1[0][2] = 1'b0;
    t_1[1][2] = 1'b0;
    t_1[2][2] = 1'b0;
    t_1[3][2] = 1'b0;
    t_1[4][2] = 1'b1;
    t_1[5][2] = 1'b1;
    t_1[6][2] = 1'b1;
    t_1[7][2] = 1'b0;
    t_1[8][2] = 1'b0;
    t_1[9][2] = 1'b1;
    t_1[0][3] = 1'b1;
    t_1[1][3] = 1'b1;
    t_1[2][3] = 1'b1;
    t_1[3][3] = 1'b0;
    t_1[4][3] = 1'b0;
    t_1[5][3] = 1'b1;
    t_1[6][3] = 1'b1;
    t_1[7][3] = 1'b0;
    t_1[8][3] = 1'b0;
    t_1[9][3] = 1'b1;

    for(i = 32'sd0; i <= 32'sd3; i = i + 32'sd1) begin
      for(i2 = 32'sd0; i2 <= 32'sd9; i2 = i2 + 32'sd1) begin
        vector[i2][i] = t_1[i2][i];
      end
    end

    t_2 = {1'b0, codeRate};
    add_temp = t_2 + 3'b001;
    extend_temp = {29'b0, add_temp};

    for(t_0 = 32'sd0; t_0 <= 32'sd9; t_0 = t_0 + 32'sd1) begin
      puncVec[t_0] = vector[t_0][extend_temp - 32'sd1];
    end

  end



  assign puncVec_0 = puncVec[0];

  assign puncVec_1 = puncVec[1];

  assign puncVec_2 = puncVec[2];

  assign puncVec_3 = puncVec[3];

  assign puncVec_4 = puncVec[4];

  assign puncVec_5 = puncVec[5];

  assign puncVec_6 = puncVec[6];

  assign puncVec_7 = puncVec[7];

  assign puncVec_8 = puncVec[8];

  assign puncVec_9 = puncVec[9];

endmodule  // whdlOFDMTx_Select_Puncture_Vector

