// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_Serialize_Start_and_End_Signals.v
// Created: 2023-05-02 12:36:37
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_Serialize_Start_and_End_Signals
// Source Path: whdlOFDMTx/Frame Generator/Header/Serializer/Serialize Start and End Signals
// Hierarchy Level: 5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_Serialize_Start_and_End_Signals
          (clk,
           reset,
           enb,
           startIn,
           endIn,
           startOut,
           endOut);


  input   clk;
  input   reset;
  input   enb;
  input   startIn;
  input   endIn;
  output  startOut;
  output  endOut;


  wire Repeat_out1;
  reg  Delay_out1;
  wire Logical_Operator_out1;
  wire Repeat1_out1;
  reg  Delay1_out1;
  wire Logical_Operator1_out1;
  reg  Delay2_out1;


  assign Repeat_out1 = startIn;

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Repeat_out1;
        end
      end
    end



  assign Logical_Operator_out1 = Repeat_out1 & Delay_out1;



  assign startOut = Logical_Operator_out1;

  assign Repeat1_out1 = endIn;

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Repeat1_out1;
        end
      end
    end



  assign Logical_Operator1_out1 = Repeat1_out1 & Delay1_out1;



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Logical_Operator1_out1;
        end
      end
    end



  assign endOut = Delay2_out1;

endmodule  // whdlOFDMTx_Serialize_Start_and_End_Signals

