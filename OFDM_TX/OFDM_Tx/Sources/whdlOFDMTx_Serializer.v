// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_Serializer.v
// Created: 2023-05-02 12:36:37
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_Serializer
// Source Path: whdlOFDMTx/Frame Generator/Header/Serializer
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_Serializer
          (clk,
           reset,
           enb,
           parallelIn_0,
           parallelIn_1,
           ctrlIn_start,
           ctrlIn_end,
           ctrlIn_valid,
           serialOut,
           startOut,
           endOut,
           ValidOut);


  input   clk;
  input   reset;
  input   enb;
  input   parallelIn_0;  // boolean
  input   parallelIn_1;  // boolean
  input   ctrlIn_start;
  input   ctrlIn_end;
  input   ctrlIn_valid;
  output  serialOut;
  output  startOut;
  output  endOut;
  output  ValidOut;


  wire valid;
  wire control_in_2;
  reg  Serializer1D_contl_cnt;  // ufix1
  wire Serializer1D_contl_cnt_next;  // ufix1
  wire [1:0] Serializer1D_contl_add_temp;  // ufix2
  wire [1:0] Serializer1D_contl_1;  // ufix2
  wire Serializer1D_invldSignal;
  wire Serializer1D_out2;
  wire [0:1] serial_in_1;  // boolean [2]
  reg  Serializer1D_data;  // ufix1
  wire serializer_PostProcessed;
  reg  Delay1_out1;
  wire start;
  wire end_rsvd;
  wire Serialize_Start_and_End_Signals_out1;
  wire Serialize_Start_and_End_Signals_out2;
  reg  Delay_out1;


  assign valid = ctrlIn_valid;

  assign control_in_2 = valid;

  always @(posedge clk or posedge reset)
    begin : Serializer1D_contl_process
      if (reset == 1'b1) begin
        Serializer1D_contl_cnt <= 1'b0;
      end
      else begin
        if (enb) begin
          Serializer1D_contl_cnt <= Serializer1D_contl_cnt_next;
        end
      end
    end

  assign Serializer1D_out2 = control_in_2 != 1'b0;
  assign Serializer1D_contl_1 = {1'b0, Serializer1D_contl_cnt};
  assign Serializer1D_contl_add_temp = Serializer1D_contl_1 + 2'b01;
  assign Serializer1D_contl_cnt_next = (Serializer1D_contl_cnt == 1'b1 ? 1'b0 :
              Serializer1D_contl_add_temp[0]);
  assign Serializer1D_invldSignal = Serializer1D_contl_cnt == 1'b0;



  assign serial_in_1[0] = parallelIn_0;
  assign serial_in_1[1] = parallelIn_1;

  always @(posedge clk or posedge reset)
    begin : Serializer1D_process
      if (reset == 1'b1) begin
        Serializer1D_data <= 1'b0;
      end
      else begin
        if (enb) begin
          if (Serializer1D_invldSignal != 1'b0) begin
            Serializer1D_data <= serial_in_1[1];
          end
          else begin
            Serializer1D_data <= serial_in_1[1];
          end
        end
      end
    end

  assign serializer_PostProcessed = (Serializer1D_invldSignal != 1'b0 ? serial_in_1[0] :
              Serializer1D_data);



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= serializer_PostProcessed;
        end
      end
    end



  assign serialOut = Delay1_out1;

  assign start = ctrlIn_start;

  assign end_rsvd = ctrlIn_end;

  whdlOFDMTx_Serialize_Start_and_End_Signals u_Serialize_Start_and_End_Signals (.clk(clk),
                                                                                .reset(reset),
                                                                                .enb(enb),
                                                                                .startIn(start),
                                                                                .endIn(end_rsvd),
                                                                                .startOut(Serialize_Start_and_End_Signals_out1),
                                                                                .endOut(Serialize_Start_and_End_Signals_out2)
                                                                                );

  assign startOut = Serialize_Start_and_End_Signals_out1;

  assign endOut = Serialize_Start_and_End_Signals_out2;

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Serializer1D_out2;
        end
      end
    end



  assign ValidOut = Delay_out1;

endmodule  // whdlOFDMTx_Serializer

