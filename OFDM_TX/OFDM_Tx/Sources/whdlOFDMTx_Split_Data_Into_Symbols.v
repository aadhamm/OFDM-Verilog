// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_Split_Data_Into_Symbols.v
// Created: 2023-05-02 12:36:37
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_Split_Data_Into_Symbols
// Source Path: whdlOFDMTx/Frame Generator/Data/Data Chain/Symbol Interleaver/Split Data Into Symbols
// Hierarchy Level: 6
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_Split_Data_Into_Symbols
          (clk,
           reset,
           enb,
           data,
           valid,
           modTypeIndex,
           dataOut,
           startOut,
           endOut,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   data;
  input   valid;
  input   [2:0] modTypeIndex;  // ufix3
  output  dataOut;
  output  startOut;
  output  endOut;
  output  validOut;


  wire [8:0] Constant3_out1;  // ufix9
  wire [8:0] Constant2_out1;  // ufix9
  wire [8:0] Constant1_out1;  // ufix9
  wire [8:0] Constant_out1;  // ufix9
  wire [8:0] Multiport_Switch_out1;  // ufix9
  wire [1:0] Constant4_out1;  // ufix2
  wire signed [9:0] Add_sub_temp;  // sfix10
  wire signed [9:0] Add_1;  // sfix10
  wire signed [9:0] Add_2;  // sfix10
  wire [8:0] Add_out1;  // ufix9
  wire [8:0] count_step;  // ufix9
  wire [8:0] count_from;  // ufix9
  wire [8:0] count_reset;  // ufix9
  reg [8:0] HDL_Counter_out1;  // ufix9
  wire [8:0] count;  // ufix9
  wire need_to_wrap;
  wire [8:0] count_value;  // ufix9
  wire [8:0] count_1;  // ufix9
  wire Relational_Operator_relop1;
  wire Logical_Operator1_out1;
  reg  Delay1_out1;
  wire [8:0] count_2;  // ufix9
  wire Compare_To_Constant_out1;
  wire Logical_Operator_out1;


  assign dataOut = data;

  assign Constant3_out1 = 9'b000111100;



  assign Constant2_out1 = 9'b001111000;



  assign Constant1_out1 = 9'b011110000;



  assign Constant_out1 = 9'b101101000;



  assign Multiport_Switch_out1 = (modTypeIndex == 3'b000 ? Constant3_out1 :
              (modTypeIndex == 3'b001 ? Constant2_out1 :
              (modTypeIndex == 3'b010 ? Constant1_out1 :
              Constant_out1)));



  assign Constant4_out1 = 2'b10;



  assign Add_1 = {1'b0, Multiport_Switch_out1};
  assign Add_2 = {8'b0, Constant4_out1};
  assign Add_sub_temp = Add_1 - Add_2;
  assign Add_out1 = Add_sub_temp[8:0];



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 359
  assign count_step = 9'b000000001;



  assign count_from = 9'b000000000;



  assign count_reset = 9'b000000000;



  assign count = HDL_Counter_out1 + count_step;



  assign need_to_wrap = HDL_Counter_out1 == 9'b101100111;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (valid == 1'b0 ? HDL_Counter_out1 :
              count_value);



  assign Relational_Operator_relop1 = Add_out1 == HDL_Counter_out1;



  assign Logical_Operator1_out1 = Relational_Operator_relop1 & valid;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Logical_Operator1_out1;
        end
      end
    end



  assign count_2 = (Delay1_out1 == 1'b0 ? count_1 :
              count_reset);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 9'b000000000;
      end
      else begin
        if (enb) begin
          HDL_Counter_out1 <= count_2;
        end
      end
    end



  assign Compare_To_Constant_out1 = HDL_Counter_out1 == 9'b000000000;



  assign Logical_Operator_out1 = Compare_To_Constant_out1 & valid;



  assign startOut = Logical_Operator_out1;

  assign endOut = Delay1_out1;

  assign validOut = valid;

endmodule  // whdlOFDMTx_Split_Data_Into_Symbols

