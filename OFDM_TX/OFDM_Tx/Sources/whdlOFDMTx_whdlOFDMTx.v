// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_whdlOFDMTx.v
// Created: 2023-05-02 12:36:37
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_whdlOFDMTx
// Source Path: whdlOFDMTx
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_whdlOFDMTx
          (clk,
           reset,
           enb_1_32_0,
           enb,
           enb_1_2_0,
           enb_1_32_1,
           modTypeIndex,
           codeRateIndex,
           data,
           valid,
           txData_re,
           txData_im,
           txValid,
           ready);


  input   clk;
  input   reset;
  input   enb_1_32_0;
  input   enb;
  input   enb_1_2_0;
  input   enb_1_32_1;
  input   [1:0] modTypeIndex;  // ufix2
  input   [1:0] codeRateIndex;  // ufix2
  input   data;
  input   valid;
  output  signed [15:0] txData_re;  // sfix16_En13
  output  signed [15:0] txData_im;  // sfix16_En13
  output  txValid;
  output  ready;


  wire Frame_Controller_and_Input_Sampler_out1;
  wire Frame_Controller_and_Input_Sampler_out2;
  wire [1:0] Frame_Controller_and_Input_Sampler_out3;  // ufix2
  wire [1:0] Frame_Controller_and_Input_Sampler_out4;  // ufix2
  wire [13:0] Frame_Controller_and_Input_Sampler_out5;  // ufix14
  wire Frame_Controller_and_Input_Sampler_out6;
  wire Frame_Controller_and_Input_Sampler_out7;
  wire Frame_Controller_and_Input_Sampler_out8;
  wire Frame_Controller_and_Input_Sampler_out9;
  wire Frame_Controller_and_Input_Sampler_out10;
  wire Frame_Controller_and_Input_Sampler_out11;
  wire Frame_Controller_and_Input_Sampler_out12;
  wire signed [15:0] Frame_Generator_out1_re;  // sfix16_En14
  wire signed [15:0] Frame_Generator_out1_im;  // sfix16_En14
  wire Frame_Generator_out2;
  wire signed [15:0] Frame_Generator_out3;  // sfix16_En14
  wire Frame_Generator_out4;
  wire signed [15:0] Frame_Generator_out5;  // sfix16_En14
  wire Frame_Generator_out6;
  wire signed [15:0] Frame_Generator_out7_re;  // sfix16_En14
  wire signed [15:0] Frame_Generator_out7_im;  // sfix16_En14
  wire Frame_Generator_out8;
  wire signed [15:0] Frame_Generator_out9_re;  // sfix16_En14
  wire signed [15:0] Frame_Generator_out9_im;  // sfix16_En14
  wire Frame_Generator_out10;
  wire signed [15:0] Multiplexer_out1_re;  // sfix16_En14
  wire signed [15:0] Multiplexer_out1_im;  // sfix16_En14
  wire Multiplexer_out2;
  wire signed [15:0] Multiplexer_out3_re;  // sfix16_En14
  wire signed [15:0] Multiplexer_out3_im;  // sfix16_En14
  wire Multiplexer_out4;
  wire Repeat_out1;
  reg  [0:1] Delay11_reg;  // ufix1 [2]
  wire [0:1] Delay11_reg_next;  // ufix1 [2]
  wire Delay11_out1;
  wire signed [15:0] Frame_Formation_and_OFDM_Modulation_out3_re;  // sfix16_En14
  wire signed [15:0] Frame_Formation_and_OFDM_Modulation_out3_im;  // sfix16_En14
  wire Frame_Formation_and_OFDM_Modulation_out4;
  wire signed [15:0] Discrete_FIR_Filter_out1_re;  // sfix16_En13
  wire signed [15:0] Discrete_FIR_Filter_out1_im;  // sfix16_En13
  wire Discrete_FIR_Filter_out2;

  // Indicates that transmitter is ready to accept data.
  // Copyright 2020-2021 The MathWorks, Inc.


  whdlOFDMTx_Frame_Controller_and_Input_Sampler u_Frame_Controller_and_Input_Sampler (.clk(clk),
                                                                                      .reset(reset),
                                                                                      .enb_1_2_0(enb_1_2_0),
                                                                                      .modInd(modTypeIndex),  // ufix2
                                                                                      .codeInd(codeRateIndex),  // ufix2
                                                                                      .data(data),
                                                                                      .valid(valid),
                                                                                      .preambleSet(Frame_Controller_and_Input_Sampler_out1),
                                                                                      .headerSet(Frame_Controller_and_Input_Sampler_out2),
                                                                                      .modIndex(Frame_Controller_and_Input_Sampler_out3),  // ufix2
                                                                                      .codeIndex(Frame_Controller_and_Input_Sampler_out4),  // ufix2
                                                                                      .trBlkSize(Frame_Controller_and_Input_Sampler_out5),  // ufix14
                                                                                      .loadSymMod(Frame_Controller_and_Input_Sampler_out6),
                                                                                      .dataSet(Frame_Controller_and_Input_Sampler_out7),
                                                                                      .resetRAM(Frame_Controller_and_Input_Sampler_out8),
                                                                                      .dataOut(Frame_Controller_and_Input_Sampler_out9),
                                                                                      .dataValid(Frame_Controller_and_Input_Sampler_out10),
                                                                                      .ofdmModReady(Frame_Controller_and_Input_Sampler_out11),
                                                                                      .ready(Frame_Controller_and_Input_Sampler_out12)
                                                                                      );

  whdlOFDMTx_Frame_Generator u_Frame_Generator (.clk(clk),
                                                .reset(reset),
                                                .enb(enb),
                                                .enb_1_2_0(enb_1_2_0),
                                                .preambleSet(Frame_Controller_and_Input_Sampler_out1),
                                                .headerSet(Frame_Controller_and_Input_Sampler_out2),
                                                .modTypeIndex(Frame_Controller_and_Input_Sampler_out3),  // ufix2
                                                .codeRateIndex(Frame_Controller_and_Input_Sampler_out4),  // ufix2
                                                .trBlkSize(Frame_Controller_and_Input_Sampler_out5),  // ufix14
                                                .loadSymMod(Frame_Controller_and_Input_Sampler_out6),
                                                .dataSet(Frame_Controller_and_Input_Sampler_out7),
                                                .resetRAM(Frame_Controller_and_Input_Sampler_out8),
                                                .dataIn(Frame_Controller_and_Input_Sampler_out9),
                                                .validIn(Frame_Controller_and_Input_Sampler_out10),
                                                .ss_re(Frame_Generator_out1_re),  // sfix16_En14
                                                .ss_im(Frame_Generator_out1_im),  // sfix16_En14
                                                .ssValid(Frame_Generator_out2),
                                                .rs(Frame_Generator_out3),  // sfix16_En14
                                                .rsValid(Frame_Generator_out4),
                                                .pilot(Frame_Generator_out5),  // sfix16_En14
                                                .pilotValid(Frame_Generator_out6),
                                                .header_re(Frame_Generator_out7_re),  // sfix16_En14
                                                .header_im(Frame_Generator_out7_im),  // sfix16_En14
                                                .headerValid(Frame_Generator_out8),
                                                .data_re(Frame_Generator_out9_re),  // sfix16_En14
                                                .data_im(Frame_Generator_out9_im),  // sfix16_En14
                                                .dataValid(Frame_Generator_out10)
                                                );

  whdlOFDMTx_Multiplexer u_Multiplexer (.ss_re(Frame_Generator_out1_re),  // sfix16_En14
                                        .ss_im(Frame_Generator_out1_im),  // sfix16_En14
                                        .ssValid(Frame_Generator_out2),
                                        .rs(Frame_Generator_out3),  // sfix16_En14
                                        .rsValid(Frame_Generator_out4),
                                        .pilot(Frame_Generator_out5),  // sfix16_En14
                                        .pilotValid(Frame_Generator_out6),
                                        .header_re(Frame_Generator_out7_re),  // sfix16_En14
                                        .header_im(Frame_Generator_out7_im),  // sfix16_En14
                                        .headerValid(Frame_Generator_out8),
                                        .data_re(Frame_Generator_out9_re),  // sfix16_En14
                                        .data_im(Frame_Generator_out9_im),  // sfix16_En14
                                        .dataValid(Frame_Generator_out10),
                                        .preambleOut_re(Multiplexer_out1_re),  // sfix16_En14
                                        .preambleOut_im(Multiplexer_out1_im),  // sfix16_En14
                                        .preambleValid(Multiplexer_out2),
                                        .dataOut_re(Multiplexer_out3_re),  // sfix16_En14
                                        .dataOut_im(Multiplexer_out3_im),  // sfix16_En14
                                        .validOut(Multiplexer_out4)
                                        );

  assign Repeat_out1 = Frame_Controller_and_Input_Sampler_out11;
 
  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_reg[0] <= 1'b0;
        Delay11_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_reg[0] <= Delay11_reg_next[0];
          Delay11_reg[1] <= Delay11_reg_next[1];
        end
      end
    end

  assign Delay11_out1 = Delay11_reg[1];
  assign Delay11_reg_next[0] = Repeat_out1;
  assign Delay11_reg_next[1] = Delay11_reg[0];



  whdlOFDMTx_Frame_Formation_and_OFDM_Modulation u_Frame_Formation_and_OFDM_Modulation (.clk(clk),
                                                                                        .reset(reset),
                                                                                        .enb_1_32_0(enb_1_32_0),
                                                                                        .enb(enb),
                                                                                        .enb_1_32_1(enb_1_32_1),
                                                                                        .preambleData_re(Multiplexer_out1_re),  // sfix16_En14
                                                                                        .preambleData_im(Multiplexer_out1_im),  // sfix16_En14
                                                                                        .preambleValid(Multiplexer_out2),
                                                                                        .data_re(Multiplexer_out3_re),  // sfix16_En14
                                                                                        .data_im(Multiplexer_out3_im),  // sfix16_En14
                                                                                        .valid(Multiplexer_out4),
                                                                                        .ready(Delay11_out1),
                                                                                        .ofdmData_re(Frame_Formation_and_OFDM_Modulation_out3_re),  // sfix16_En14
                                                                                        .ofdmData_im(Frame_Formation_and_OFDM_Modulation_out3_im),  // sfix16_En14
                                                                                        .ofdmValid(Frame_Formation_and_OFDM_Modulation_out4)
                                                                                        );

  whdlOFDMTx_Discrete_FIR_Filter u_Discrete_FIR_Filter (.clk(clk),
                                                        .reset(reset),
                                                        .enb_1_32_0(enb_1_32_0),
                                                        .dataIn_re(Frame_Formation_and_OFDM_Modulation_out3_re),  // sfix16_En14
                                                        .dataIn_im(Frame_Formation_and_OFDM_Modulation_out3_im),  // sfix16_En14
                                                        .validIn(Frame_Formation_and_OFDM_Modulation_out4),
                                                        .dataOut_re(Discrete_FIR_Filter_out1_re),  // sfix16_En13
                                                        .dataOut_im(Discrete_FIR_Filter_out1_im),  // sfix16_En13
                                                        .validOut(Discrete_FIR_Filter_out2)
                                                        );

  assign txData_re = Discrete_FIR_Filter_out1_re;

  assign txData_im = Discrete_FIR_Filter_out1_im;

  assign txValid = Discrete_FIR_Filter_out2;

  assign ready = Frame_Controller_and_Input_Sampler_out12;

endmodule  // whdlOFDMTx_whdlOFDMTx

