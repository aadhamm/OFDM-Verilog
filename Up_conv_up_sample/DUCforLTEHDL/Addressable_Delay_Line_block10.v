// -------------------------------------------------------------
// 
// File Name: D:\OFDM\HDLImplementationOfDUCForLTEExample(Single Tone Output)\HDLImplementationOfDUCForLTEExample\hdlsrc\complex_upsampler\DUCforLTEHDL\Addressable_Delay_Line_block10.v
// Created: 2023-05-25 17:45:33
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Addressable_Delay_Line_block10
// Source Path: DUCforLTEHDL/HDL_DUC/Lowpass Interpolator/DUCforLTEHDL/HDL_DUC/Lowpass Interpolator/FIRFilter1/Addressable 
// Delay Lin
// Hierarchy Level: 3
// 
// Addressable Delay Line
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Addressable_Delay_Line_block10
          (clk,
           reset,
           enb,
           dataIn,
           wrEn,
           wrAddr,
           rdAddr,
           lutAddr,
           delayLineEnd,
           dataOut);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] dataIn;  // sfix16_En15
  input   wrEn;
  input   [3:0] wrAddr;  // ufix4
  input   [3:0] rdAddr;  // ufix4
  input   [3:0] lutAddr;  // ufix4
  output  signed [15:0] delayLineEnd;  // sfix16_En15
  output  signed [15:0] dataOut;  // sfix16_En15


  wire relop_relop1;
  reg  dataEndEn;
  wire wrEnN;
  wire dataEndEnS;
  wire signed [15:0] delayedSignals;  // sfix16_En15
  reg signed [15:0] dataOutReg_reg [0:3];  // sfix16 [4]
  wire signed [15:0] dataOutReg_reg_next [0:3];  // sfix16_En15 [4]
  wire signed [15:0] delayedSignals_1;  // sfix16_En15
  reg signed [15:0] delayLineEnd_1;  // sfix16_En15
  reg [3:0] lutAddrREG;  // ufix4
  wire zeroSW;
  wire signed [15:0] zeroConst;  // sfix16_En15


  assign relop_relop1 = wrAddr == rdAddr;



  always @(posedge clk or posedge reset)
    begin : dataOutReg_process
      if (reset == 1'b1) begin
        dataEndEn <= 1'b0;
      end
      else begin
        if (enb) begin
          dataEndEn <= relop_relop1;
        end
      end
    end



  assign wrEnN =  ~ dataEndEn;



  assign dataEndEnS = relop_relop1 & wrEnN;



  SimpleDualPortRAM_generic #(.AddrWidth(4),
                              .DataWidth(16)
                              )
                            u_simpleDualPortRam (.clk(clk),
                                                 .enb(enb),
                                                 .wr_din(dataIn),
                                                 .wr_addr(wrAddr),
                                                 .wr_en(wrEn),
                                                 .rd_addr(rdAddr),
                                                 .rd_dout(delayedSignals)
                                                 );

  always @(posedge clk or posedge reset)
    begin : dataOutReg_1_process
      if (reset == 1'b1) begin
        dataOutReg_reg[0] <= 16'sb0000000000000000;
        dataOutReg_reg[1] <= 16'sb0000000000000000;
        dataOutReg_reg[2] <= 16'sb0000000000000000;
        dataOutReg_reg[3] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          dataOutReg_reg[0] <= dataOutReg_reg_next[0];
          dataOutReg_reg[1] <= dataOutReg_reg_next[1];
          dataOutReg_reg[2] <= dataOutReg_reg_next[2];
          dataOutReg_reg[3] <= dataOutReg_reg_next[3];
        end
      end
    end

  assign delayedSignals_1 = dataOutReg_reg[3];
  assign dataOutReg_reg_next[0] = delayedSignals;
  assign dataOutReg_reg_next[1] = dataOutReg_reg[0];
  assign dataOutReg_reg_next[2] = dataOutReg_reg[1];
  assign dataOutReg_reg_next[3] = dataOutReg_reg[2];



  always @(posedge clk or posedge reset)
    begin : dataOutReg_2_process
      if (reset == 1'b1) begin
        delayLineEnd_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb && dataEndEnS) begin
          delayLineEnd_1 <= delayedSignals_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : lutREG_process
      if (reset == 1'b1) begin
        lutAddrREG <= 4'b0000;
      end
      else begin
        if (enb) begin
          lutAddrREG <= lutAddr;
        end
      end
    end



  assign zeroSW = lutAddrREG >= 4'b1011;



  assign zeroConst = 16'sb0000000000000000;



  assign dataOut = (zeroSW == 1'b0 ? delayedSignals :
              zeroConst);



  assign delayLineEnd = delayLineEnd_1;

endmodule  // Addressable_Delay_Line_block10

