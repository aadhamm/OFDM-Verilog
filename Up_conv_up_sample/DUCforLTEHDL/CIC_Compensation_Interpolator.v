// -------------------------------------------------------------
// 
// File Name: D:\OFDM\HDLImplementationOfDUCForLTEExample(Single Tone Output)\HDLImplementationOfDUCForLTEExample\hdlsrc\complex_upsampler\DUCforLTEHDL\CIC_Compensation_Interpolator.v
// Created: 2023-05-25 17:45:33
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: CIC_Compensation_Interpolator
// Source Path: DUCforLTEHDL/HDL_DUC/CIC Compensation Interpolator
// Hierarchy Level: 1
// 
// HDLFIRInterpolation
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CIC_Compensation_Interpolator
          (clk,
           reset,
           enb,
           dataIn_re,
           dataIn_im,
           validIn,
           dataOut_re,
           dataOut_im,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   signed [17:0] dataIn_re;  // sfix18_En14
  input   signed [17:0] dataIn_im;  // sfix18_En14
  input   validIn;
  output  signed [17:0] dataOut_re;  // sfix18_En14
  output  signed [17:0] dataOut_im;  // sfix18_En14
  output  validOut;


  wire syncReset;
  wire signed [17:0] FIROutput1_re;  // sfix18_En14
  wire signed [17:0] FIROutput1_im;  // sfix18_En14
  wire FIRValid1;
  wire outputSharingRSTTerm2;
  wire sharingReset;
  wire counterRST;
  wire validSharing;
  reg  sharingSEL_1;  // ufix1
  wire SharingSEL0;
  wire SharingCount0;
  wire outputSharingRSTTerm1;
  wire outputSharingRSTTerm3;
  reg  outputSharing_1;
  wire counterEnTerm;
  wire counterEn;
  reg [1:0] sharingCounter_1;  // ufix2
  wire validOutTerm;
  reg  validOut_1;
  wire signed [17:0] dataZero_re;  // sfix18_En14
  wire signed [17:0] dataZero_im;  // sfix18_En14
  reg  sharingSELREG;  // ufix1
  reg signed [17:0] FIROutputCastDB1_re;  // sfix18_En14
  reg signed [17:0] FIROutputCastDB1_im;  // sfix18_En14
  wire signed [17:0] FIROutput2_re;  // sfix18_En14
  wire signed [17:0] FIROutput2_im;  // sfix18_En14
  wire FIRValid2;
  reg signed [17:0] FIROutputCastDB2_re;  // sfix18_En14
  reg signed [17:0] FIROutputCastDB2_im;  // sfix18_En14
  wire signed [17:0] dataSelect_re;  // sfix18_En14
  wire signed [17:0] dataSelect_im;  // sfix18_En14


  assign syncReset = 1'b0;



  FIRFilter1 u_filterInstantiation (.clk(clk),
                                    .reset(reset),
                                    .enb(enb),
                                    .dataIn_re(dataIn_re),  // sfix18_En14
                                    .dataIn_im(dataIn_im),  // sfix18_En14
                                    .validIn(validIn),
                                    .dataOut_re(FIROutput1_re),  // sfix18_En14
                                    .dataOut_im(FIROutput1_im),  // sfix18_En14
                                    .validOut(FIRValid1)
                                    );

  assign outputSharingRSTTerm2 =  ~ FIRValid1;



  assign counterRST =  ~ sharingReset;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1
  always @(posedge clk or posedge reset)
    begin : SharingSEL_process
      if (reset == 1'b1) begin
        sharingSEL_1 <= 1'b0;
      end
      else begin
        if (enb && validSharing) begin
          sharingSEL_1 <=  ~ sharingSEL_1;
        end
      end
    end



  assign SharingSEL0 = sharingSEL_1 == 1'b0;



  assign outputSharingRSTTerm1 = SharingCount0 & SharingSEL0;



  assign outputSharingRSTTerm3 = outputSharingRSTTerm1 & outputSharingRSTTerm2;



  assign sharingReset = syncReset | outputSharingRSTTerm3;



  always @(posedge clk or posedge reset)
    begin : OutputSharing_process
      if (reset == 1'b1) begin
        outputSharing_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (sharingReset == 1'b1) begin
            outputSharing_1 <= 1'b0;
          end
          else begin
            if (FIRValid1) begin
              outputSharing_1 <= FIRValid1;
            end
          end
        end
      end
    end



  assign counterEnTerm = outputSharing_1 | FIRValid1;



  assign counterEn = counterEnTerm & counterRST;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1
  always @(posedge clk or posedge reset)
    begin : SharingCounter_process
      if (reset == 1'b1) begin
        sharingCounter_1 <= 2'b00;
      end
      else begin
        if (enb) begin
          if (counterEn == 1'b1) begin
            if (sharingCounter_1 >= 2'b01) begin
              sharingCounter_1 <= 2'b00;
            end
            else begin
              sharingCounter_1 <= sharingCounter_1 + 2'b01;
            end
          end
        end
      end
    end



  assign SharingCount0 = sharingCounter_1 == 2'b00;



  assign validSharing = SharingCount0 & counterEn;



  assign validOutTerm = validSharing | FIRValid1;



  always @(posedge clk or posedge reset)
    begin : OutputSharing_2_process
      if (reset == 1'b1) begin
        validOut_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            validOut_1 <= 1'b0;
          end
          else begin
            validOut_1 <= validOutTerm;
          end
        end
      end
    end



  assign dataZero_re = 18'sb000000000000000000;
  assign dataZero_im = 18'sb000000000000000000;



  always @(posedge clk or posedge reset)
    begin : OutputSharing_3_process
      if (reset == 1'b1) begin
        sharingSELREG <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            sharingSELREG <= 1'b0;
          end
          else begin
            if (validSharing) begin
              sharingSELREG <= sharingSEL_1;
            end
          end
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        FIROutputCastDB1_re <= 18'sb000000000000000000;
        FIROutputCastDB1_im <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            FIROutputCastDB1_re <= 18'sb000000000000000000;
            FIROutputCastDB1_im <= 18'sb000000000000000000;
          end
          else begin
            if (FIRValid1) begin
              FIROutputCastDB1_re <= FIROutput1_re;
              FIROutputCastDB1_im <= FIROutput1_im;
            end
          end
        end
      end
    end



  FIRFilter2 u_filterInstantiation_1 (.clk(clk),
                                      .reset(reset),
                                      .enb(enb),
                                      .dataIn_re(dataIn_re),  // sfix18_En14
                                      .dataIn_im(dataIn_im),  // sfix18_En14
                                      .validIn(validIn),
                                      .dataOut_re(FIROutput2_re),  // sfix18_En14
                                      .dataOut_im(FIROutput2_im),  // sfix18_En14
                                      .validOut(FIRValid2)
                                      );

  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        FIROutputCastDB2_re <= 18'sb000000000000000000;
        FIROutputCastDB2_im <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            FIROutputCastDB2_re <= 18'sb000000000000000000;
            FIROutputCastDB2_im <= 18'sb000000000000000000;
          end
          else begin
            if (FIRValid2) begin
              FIROutputCastDB2_re <= FIROutput2_re;
              FIROutputCastDB2_im <= FIROutput2_im;
            end
          end
        end
      end
    end



  assign dataSelect_re = (sharingSELREG == 1'b0 ? FIROutputCastDB1_re :
              FIROutputCastDB2_re);
  assign dataSelect_im = (sharingSELREG == 1'b0 ? FIROutputCastDB1_im :
              FIROutputCastDB2_im);



  assign dataOut_re = (validOut_1 == 1'b0 ? dataZero_re :
              dataSelect_re);
  assign dataOut_im = (validOut_1 == 1'b0 ? dataZero_im :
              dataSelect_im);



  assign validOut = validOut_1;

endmodule  // CIC_Compensation_Interpolator

