// -------------------------------------------------------------
// 
// File Name: D:\OFDM\HDLImplementationOfDUCForLTEExample(Single Tone Output)\HDLImplementationOfDUCForLTEExample\hdlsrc\complex_upsampler\DUCforLTEHDL\FIRFilter2.v
// Created: 2023-05-25 17:45:33
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: FIRFilter2
// Source Path: DUCforLTEHDL/HDL_DUC/CIC Compensation Interpolator/DUCforLTEHDL/HDL_DUC/CIC Compensation Interpolator/FIRFilter2
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module FIRFilter2
          (clk,
           reset,
           enb,
           dataIn_re,
           dataIn_im,
           validIn,
           dataOut_re,
           dataOut_im,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   signed [17:0] dataIn_re;  // sfix18_En14
  input   signed [17:0] dataIn_im;  // sfix18_En14
  input   validIn;
  output  signed [17:0] dataOut_re;  // sfix18_En14
  output  signed [17:0] dataOut_im;  // sfix18_En14
  output  validOut;


  wire signed [17:0] dinSM_re;  // sfix18_En14
  wire signed [17:0] dinSM_im;  // sfix18_En14
  wire dinVldSM;
  reg [1:0] nextDelayLineRdAddrReverse;  // ufix2
  reg [1:0] rdCountReverse_1;  // ufix2
  reg [1:0] nextDelayLineWrAddr;  // ufix2
  reg [1:0] wrCount_1;  // ufix2
  reg [1:0] nextDelayLineRdAddr;  // ufix2
  reg [1:0] rdCount_1;  // ufix2
  reg [1:0] nextSharingCount;  // ufix2
  reg [1:0] sharingCount_1;  // ufix2
  reg  delayLineValidInP;
  reg  lastPhaseStrobe;
  reg  delayLineShiftEnP;
  reg  delayLineShiftEn1_1;
  wire syncResetRst;
  reg  delayLineShiftEn2_1;
  reg  delayLineShiftEn3_1;
  reg  [0:6] validOutLookahead_reg;  // ufix1 [7]
  wire [0:6] validOutLookahead_reg_next;  // ufix1 [7]
  wire validOutLookahead_1;
  reg  vldOut_1;
  wire notValid;
  reg [1:0] rdAddr0_1;  // ufix2
  reg [1:0] rdAddr1;  // ufix2
  reg [1:0] rdAddr2;  // ufix2
  reg [1:0] rdAddr3;  // ufix2
  wire rdAddrEndNonZero;
  wire rdAddrEndZero;
  reg  [0:5] finalSumValidPipe_reg;  // ufix1 [6]
  wire [0:5] finalSumValidPipe_reg_next;  // ufix1 [6]
  wire accumulate;
  wire signed [35:0] accDataOut;  // sfix36_En30
  reg [1:0] wrAddrP;  // ufix2
  reg [1:0] rdAddrDelayLine0;  // ufix2
  wire signed [17:0] delayLineEnd0;  // sfix18_En14
  wire signed [17:0] delayLineDataOut0;  // sfix18_En14
  reg signed [17:0] delayLineDataIn1_1;  // sfix18_En14
  reg [1:0] wrAddr1;  // ufix2
  reg [1:0] rdAddrDelayLine1;  // ufix2
  wire signed [17:0] delayLineEnd1;  // sfix18_En14
  wire signed [17:0] delayLineDataOut1;  // sfix18_En14
  reg signed [17:0] delayLineDataIn2_1;  // sfix18_En14
  reg [1:0] wrAddr2;  // ufix2
  reg [1:0] rdAddrDelayLine2;  // ufix2
  wire signed [17:0] delayLineEnd2;  // sfix18_En14
  wire signed [17:0] delayLineDataOut2;  // sfix18_En14
  reg signed [17:0] delayLineDataIn3_1;  // sfix18_En14
  reg [1:0] wrAddr3;  // ufix2
  reg [1:0] rdAddrDelayLine3;  // ufix2
  wire signed [17:0] delayLineEnd3deadOut;  // sfix18_En14
  wire signed [17:0] delayLineDataOut3;  // sfix18_En14
  reg signed [17:0] coeffTableOut3;  // sfix18_En16
  reg signed [17:0] coeffTableRegP3_1;  // sfix18_En16
  reg signed [17:0] coeffTableOut2;  // sfix18_En16
  reg signed [17:0] coeffTableRegP2_1;  // sfix18_En16
  reg signed [17:0] coeffTableOut1;  // sfix18_En16
  reg signed [17:0] coeffTableRegP1_1;  // sfix18_En16
  reg signed [17:0] coeffTableOut0;  // sfix18_En16
  reg signed [17:0] coeffTableRegP0_1;  // sfix18_En16
  wire signed [35:0] sumIn;  // sfix36_En30
  wire signed [35:0] sumOut;  // sfix36_En30
  wire signed [35:0] sumOut_0;  // sfix36_En30
  wire signed [35:0] sumOut_1;  // sfix36_En30
  wire signed [35:0] sumOut_2;  // sfix36_En30
  reg signed [35:0] sumOutReg_1;  // sfix36_En30
  reg signed [35:0] accDataOut_1;  // sfix36_En30
  wire signed [35:0] accSwitchOut;  // sfix36_En30
  wire signed [35:0] accAdderOut;  // sfix36_En30
  wire signed [17:0] converterOut;  // sfix18_En14
  reg signed [17:0] dout_re_1;  // sfix18_En14
  reg  [0:6] validOutLookahead_reg_1;  // ufix1 [7]
  wire [0:6] validOutLookahead_reg_next_1;  // ufix1 [7]
  wire validOutLookahead_3;
  wire rdAddrEndNonZero_1;
  wire rdAddrEndZero_1;
  reg  [0:5] finalSumValidPipe_reg_1;  // ufix1 [6]
  wire [0:5] finalSumValidPipe_reg_next_1;  // ufix1 [6]
  wire accumulate_1;
  wire signed [35:0] accDataOut_3;  // sfix36_En30
  wire signed [17:0] delayLineEnd0_1;  // sfix18_En14
  wire signed [17:0] delayLineDataOut0_1;  // sfix18_En14
  reg signed [17:0] delayLineDataIn1_3;  // sfix18_En14
  wire signed [17:0] delayLineEnd1_1;  // sfix18_En14
  wire signed [17:0] delayLineDataOut1_1;  // sfix18_En14
  reg signed [17:0] delayLineDataIn2_3;  // sfix18_En14
  wire signed [17:0] delayLineEnd2_1;  // sfix18_En14
  wire signed [17:0] delayLineDataOut2_1;  // sfix18_En14
  reg signed [17:0] delayLineDataIn3_3;  // sfix18_En14
  wire signed [17:0] delayLineEnd3deadOut_1;  // sfix18_En14
  wire signed [17:0] delayLineDataOut3_1;  // sfix18_En14
  reg signed [17:0] coeffTableOut3_1;  // sfix18_En16
  reg signed [17:0] coeffTableRegP3_3;  // sfix18_En16
  reg signed [17:0] coeffTableOut2_1;  // sfix18_En16
  reg signed [17:0] coeffTableRegP2_3;  // sfix18_En16
  reg signed [17:0] coeffTableOut1_1;  // sfix18_En16
  reg signed [17:0] coeffTableRegP1_3;  // sfix18_En16
  reg signed [17:0] coeffTableOut0_1;  // sfix18_En16
  reg signed [17:0] coeffTableRegP0_3;  // sfix18_En16
  wire signed [35:0] sumIn_1;  // sfix36_En30
  wire signed [35:0] sumOut_3;  // sfix36_En30
  wire signed [35:0] sumOut_0_1;  // sfix36_En30
  wire signed [35:0] sumOut_1_1;  // sfix36_En30
  wire signed [35:0] sumOut_2_1;  // sfix36_En30
  reg signed [35:0] sumOutReg_3;  // sfix36_En30
  reg signed [35:0] accDataOut_4;  // sfix36_En30
  wire signed [35:0] accSwitchOut_1;  // sfix36_En30
  wire signed [35:0] accAdderOut_1;  // sfix36_En30
  wire signed [17:0] converterOut_1;  // sfix18_En14
  reg signed [17:0] dout_im_1;  // sfix18_En14
  wire signed [17:0] dataZero;  // sfix18_En14
  wire signed [17:0] dataZero_dtc_re;  // sfix18_En14
  wire signed [17:0] dataZero_dtc_im;  // sfix18_En14
  wire signed [17:0] dout_cmplxSW_re;  // sfix18_En14
  wire signed [17:0] dout_cmplxSW_im;  // sfix18_En14
  reg [1:0] InputControl_out4_0;  // ufix2

  initial begin
    coeffTableRegP3_1 = 18'sb000000000000000000;
    coeffTableRegP2_1 = 18'sb000000000000000000;
    coeffTableRegP1_1 = 18'sb000000000000000000;
    coeffTableRegP0_1 = 18'sb000000000000000000;
    coeffTableRegP3_3 = 18'sb000000000000000000;
    coeffTableRegP2_3 = 18'sb000000000000000000;
    coeffTableRegP1_3 = 18'sb000000000000000000;
    coeffTableRegP0_3 = 18'sb000000000000000000;
  end

  FirRdyLogic_block u_firRdyLogic (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .dataIn_re(dataIn_re),  // sfix18_En14
                                   .dataIn_im(dataIn_im),  // sfix18_En14
                                   .validIn(validIn),
                                   .dinSM_re(dinSM_re),  // sfix18_En14
                                   .dinSM_im(dinSM_im),  // sfix18_En14
                                   .dinVldSM(dinVldSM)
                                   );

  always @(posedge clk or posedge reset)
    begin : rdCountReverse_process
      if (reset == 1'b1) begin
        rdCountReverse_1 <= 2'b00;
      end
      else begin
        if (enb) begin
          rdCountReverse_1 <= nextDelayLineRdAddrReverse;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : wrCount_process
      if (reset == 1'b1) begin
        wrCount_1 <= 2'b00;
      end
      else begin
        if (enb) begin
          wrCount_1 <= nextDelayLineWrAddr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : rdCount_process
      if (reset == 1'b1) begin
        rdCount_1 <= 2'b00;
      end
      else begin
        if (enb) begin
          rdCount_1 <= nextDelayLineRdAddr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : sharingCount_process
      if (reset == 1'b1) begin
        sharingCount_1 <= 2'b00;
      end
      else begin
        if (enb) begin
          sharingCount_1 <= nextSharingCount;
        end
      end
    end



  // Input control counter combinatorial logic
  always @(dinVldSM, rdCountReverse_1, rdCount_1, sharingCount_1, wrCount_1) begin
    delayLineValidInP = (sharingCount_1 == 2'b00) && (dinVldSM == 1'b1);
    lastPhaseStrobe = sharingCount_1 == 2'b11;
    if ((dinVldSM == 1'b1) || (sharingCount_1 > 2'b00)) begin
      if (sharingCount_1 == 2'b11) begin
        nextSharingCount = 2'b00;
      end
      else begin
        nextSharingCount = sharingCount_1 + 2'b01;
      end
    end
    else begin
      nextSharingCount = sharingCount_1;
    end
    if (dinVldSM == 1'b1) begin
      if (wrCount_1 == 2'b11) begin
        InputControl_out4_0 = 2'b00;
      end
      else begin
        InputControl_out4_0 = wrCount_1 + 2'b01;
      end
    end
    else begin
      InputControl_out4_0 = wrCount_1;
    end
    if ((rdCount_1 != InputControl_out4_0) || (dinVldSM == 1'b1)) begin
      if (rdCount_1 == 2'b00) begin
        nextDelayLineRdAddr = 2'b11;
      end
      else begin
        nextDelayLineRdAddr = rdCount_1 - 2'b01;
      end
    end
    else begin
      nextDelayLineRdAddr = rdCount_1;
    end
    if ((sharingCount_1 > 2'b00) || (dinVldSM == 1'b1)) begin
      if (sharingCount_1 == 2'b11) begin
        if (wrCount_1 == 2'b11) begin
          nextDelayLineRdAddrReverse = 2'b00;
        end
        else begin
          nextDelayLineRdAddrReverse = wrCount_1 + 2'b01;
        end
      end
      else if (rdCountReverse_1 == 2'b11) begin
        nextDelayLineRdAddrReverse = 2'b00;
      end
      else begin
        nextDelayLineRdAddrReverse = rdCountReverse_1 + 2'b01;
      end
    end
    else begin
      nextDelayLineRdAddrReverse = rdCountReverse_1;
    end
    nextDelayLineWrAddr = InputControl_out4_0;
  end



  always @(posedge clk or posedge reset)
    begin : delayLineShiftEn0_process
      if (reset == 1'b1) begin
        delayLineShiftEnP <= 1'b0;
      end
      else begin
        if (enb) begin
          delayLineShiftEnP <= lastPhaseStrobe;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : delayLineShiftEn1_process
      if (reset == 1'b1) begin
        delayLineShiftEn1_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          delayLineShiftEn1_1 <= delayLineShiftEnP;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : delayLineShiftEn2_process
      if (reset == 1'b1) begin
        delayLineShiftEn2_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncResetRst == 1'b1) begin
            delayLineShiftEn2_1 <= 1'b0;
          end
          else begin
            delayLineShiftEn2_1 <= delayLineShiftEn1_1;
          end
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : delayLineShiftEn3_process
      if (reset == 1'b1) begin
        delayLineShiftEn3_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncResetRst == 1'b1) begin
            delayLineShiftEn3_1 <= 1'b0;
          end
          else begin
            delayLineShiftEn3_1 <= delayLineShiftEn2_1;
          end
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : validOutLookahead_process
      if (reset == 1'b1) begin
        validOutLookahead_reg[0] <= 1'b0;
        validOutLookahead_reg[1] <= 1'b0;
        validOutLookahead_reg[2] <= 1'b0;
        validOutLookahead_reg[3] <= 1'b0;
        validOutLookahead_reg[4] <= 1'b0;
        validOutLookahead_reg[5] <= 1'b0;
        validOutLookahead_reg[6] <= 1'b0;
      end
      else begin
        if (enb) begin
          validOutLookahead_reg[0] <= validOutLookahead_reg_next[0];
          validOutLookahead_reg[1] <= validOutLookahead_reg_next[1];
          validOutLookahead_reg[2] <= validOutLookahead_reg_next[2];
          validOutLookahead_reg[3] <= validOutLookahead_reg_next[3];
          validOutLookahead_reg[4] <= validOutLookahead_reg_next[4];
          validOutLookahead_reg[5] <= validOutLookahead_reg_next[5];
          validOutLookahead_reg[6] <= validOutLookahead_reg_next[6];
        end
      end
    end

  assign validOutLookahead_1 = validOutLookahead_reg[6];
  assign validOutLookahead_reg_next[0] = delayLineShiftEn3_1;
  assign validOutLookahead_reg_next[1] = validOutLookahead_reg[0];
  assign validOutLookahead_reg_next[2] = validOutLookahead_reg[1];
  assign validOutLookahead_reg_next[3] = validOutLookahead_reg[2];
  assign validOutLookahead_reg_next[4] = validOutLookahead_reg[3];
  assign validOutLookahead_reg_next[5] = validOutLookahead_reg[4];
  assign validOutLookahead_reg_next[6] = validOutLookahead_reg[5];



  always @(posedge clk or posedge reset)
    begin : vldOut_process
      if (reset == 1'b1) begin
        vldOut_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          vldOut_1 <= validOutLookahead_1;
        end
      end
    end



  assign notValid =  ~ vldOut_1;



  always @(posedge clk or posedge reset)
    begin : rdAddr0_process
      if (reset == 1'b1) begin
        rdAddr0_1 <= 2'b00;
      end
      else begin
        if (enb) begin
          rdAddr0_1 <= sharingCount_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : rdAddr0_2_process
      if (reset == 1'b1) begin
        rdAddr1 <= 2'b00;
      end
      else begin
        if (enb) begin
          rdAddr1 <= rdAddr0_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : rdAddr1_1_process
      if (reset == 1'b1) begin
        rdAddr2 <= 2'b00;
      end
      else begin
        if (enb) begin
          rdAddr2 <= rdAddr1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : rdAddr2_1_process
      if (reset == 1'b1) begin
        rdAddr3 <= 2'b00;
      end
      else begin
        if (enb) begin
          rdAddr3 <= rdAddr2;
        end
      end
    end



  assign rdAddrEndNonZero = rdAddr3 != 2'b00;



  assign rdAddrEndZero =  ~ rdAddrEndNonZero;



  always @(posedge clk or posedge reset)
    begin : finalSumValidPipe_process
      if (reset == 1'b1) begin
        finalSumValidPipe_reg[0] <= 1'b0;
        finalSumValidPipe_reg[1] <= 1'b0;
        finalSumValidPipe_reg[2] <= 1'b0;
        finalSumValidPipe_reg[3] <= 1'b0;
        finalSumValidPipe_reg[4] <= 1'b0;
        finalSumValidPipe_reg[5] <= 1'b0;
      end
      else begin
        if (enb) begin
          finalSumValidPipe_reg[0] <= finalSumValidPipe_reg_next[0];
          finalSumValidPipe_reg[1] <= finalSumValidPipe_reg_next[1];
          finalSumValidPipe_reg[2] <= finalSumValidPipe_reg_next[2];
          finalSumValidPipe_reg[3] <= finalSumValidPipe_reg_next[3];
          finalSumValidPipe_reg[4] <= finalSumValidPipe_reg_next[4];
          finalSumValidPipe_reg[5] <= finalSumValidPipe_reg_next[5];
        end
      end
    end

  assign accumulate = finalSumValidPipe_reg[5];
  assign finalSumValidPipe_reg_next[0] = rdAddrEndZero;
  assign finalSumValidPipe_reg_next[1] = finalSumValidPipe_reg[0];
  assign finalSumValidPipe_reg_next[2] = finalSumValidPipe_reg[1];
  assign finalSumValidPipe_reg_next[3] = finalSumValidPipe_reg[2];
  assign finalSumValidPipe_reg_next[4] = finalSumValidPipe_reg[3];
  assign finalSumValidPipe_reg_next[5] = finalSumValidPipe_reg[4];



  assign accDataOut = 36'sh000000000;



  always @(posedge clk or posedge reset)
    begin : wrAddr_process
      if (reset == 1'b1) begin
        wrAddrP <= 2'b00;
      end
      else begin
        if (enb) begin
          wrAddrP <= wrCount_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : rdAddrDelayLine_process
      if (reset == 1'b1) begin
        rdAddrDelayLine0 <= 2'b00;
      end
      else begin
        if (enb) begin
          rdAddrDelayLine0 <= rdCount_1;
        end
      end
    end



  Addressable_Delay_Line_block1 u_delayLine0 (.clk(clk),
                                              .reset(reset),
                                              .enb(enb),
                                              .dataIn(dinSM_re),  // sfix18_En14
                                              .wrEn(delayLineValidInP),
                                              .wrAddr(wrAddrP),  // ufix2
                                              .rdAddr(rdAddrDelayLine0),  // ufix2
                                              .delayLineEnd(delayLineEnd0),  // sfix18_En14
                                              .dataOut(delayLineDataOut0)  // sfix18_En14
                                              );

  always @(posedge clk or posedge reset)
    begin : delayLineDataIn1_process
      if (reset == 1'b1) begin
        delayLineDataIn1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn1_1 <= delayLineEnd0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : wrAddr0_process
      if (reset == 1'b1) begin
        wrAddr1 <= 2'b00;
      end
      else begin
        if (enb) begin
          wrAddr1 <= wrAddrP;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : rdAddrDelayLine0_1_process
      if (reset == 1'b1) begin
        rdAddrDelayLine1 <= 2'b00;
      end
      else begin
        if (enb) begin
          rdAddrDelayLine1 <= rdAddrDelayLine0;
        end
      end
    end



  Addressable_Delay_Line_block1 u_delayLine1 (.clk(clk),
                                              .reset(reset),
                                              .enb(enb),
                                              .dataIn(delayLineDataIn1_1),  // sfix18_En14
                                              .wrEn(delayLineShiftEn1_1),
                                              .wrAddr(wrAddr1),  // ufix2
                                              .rdAddr(rdAddrDelayLine1),  // ufix2
                                              .delayLineEnd(delayLineEnd1),  // sfix18_En14
                                              .dataOut(delayLineDataOut1)  // sfix18_En14
                                              );

  always @(posedge clk or posedge reset)
    begin : delayLineDataIn2_process
      if (reset == 1'b1) begin
        delayLineDataIn2_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn2_1 <= delayLineEnd1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : wrAddr1_1_process
      if (reset == 1'b1) begin
        wrAddr2 <= 2'b00;
      end
      else begin
        if (enb) begin
          wrAddr2 <= wrAddr1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : rdAddrDelayLine1_1_process
      if (reset == 1'b1) begin
        rdAddrDelayLine2 <= 2'b00;
      end
      else begin
        if (enb) begin
          rdAddrDelayLine2 <= rdAddrDelayLine1;
        end
      end
    end



  Addressable_Delay_Line_block1 u_delayLine2 (.clk(clk),
                                              .reset(reset),
                                              .enb(enb),
                                              .dataIn(delayLineDataIn2_1),  // sfix18_En14
                                              .wrEn(delayLineShiftEn2_1),
                                              .wrAddr(wrAddr2),  // ufix2
                                              .rdAddr(rdAddrDelayLine2),  // ufix2
                                              .delayLineEnd(delayLineEnd2),  // sfix18_En14
                                              .dataOut(delayLineDataOut2)  // sfix18_En14
                                              );

  always @(posedge clk or posedge reset)
    begin : delayLineDataIn3_process
      if (reset == 1'b1) begin
        delayLineDataIn3_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn3_1 <= delayLineEnd2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : wrAddr2_1_process
      if (reset == 1'b1) begin
        wrAddr3 <= 2'b00;
      end
      else begin
        if (enb) begin
          wrAddr3 <= wrAddr2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : rdAddrDelayLine2_1_process
      if (reset == 1'b1) begin
        rdAddrDelayLine3 <= 2'b00;
      end
      else begin
        if (enb) begin
          rdAddrDelayLine3 <= rdAddrDelayLine2;
        end
      end
    end



  Addressable_Delay_Line_block1 u_delayLine3 (.clk(clk),
                                              .reset(reset),
                                              .enb(enb),
                                              .dataIn(delayLineDataIn3_1),  // sfix18_En14
                                              .wrEn(delayLineShiftEn3_1),
                                              .wrAddr(wrAddr3),  // ufix2
                                              .rdAddr(rdAddrDelayLine3),  // ufix2
                                              .delayLineEnd(delayLineEnd3deadOut),  // sfix18_En14
                                              .dataOut(delayLineDataOut3)  // sfix18_En14
                                              );

  // Coefficient table for multiplier3
  always @(rdAddr3) begin
    case ( rdAddr3)
      2'b00 :
        begin
          coeffTableOut3 = 18'sb000000100011011011;
        end
      2'b01 :
        begin
          coeffTableOut3 = 18'sb000000001011110010;
        end
      2'b10 :
        begin
          coeffTableOut3 = 18'sb111111110011010010;
        end
      2'b11 :
        begin
          coeffTableOut3 = 18'sb000000000100110011;
        end
      default :
        begin
          coeffTableOut3 = 18'sb000000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP3_process
      if (enb) begin
        coeffTableRegP3_1 <= coeffTableOut3;
      end
    end



  // Coefficient table for multiplier2
  always @(rdAddr2) begin
    case ( rdAddr2)
      2'b00 :
        begin
          coeffTableOut2 = 18'sb111011101110111110;
        end
      2'b01 :
        begin
          coeffTableOut2 = 18'sb000100001001101110;
        end
      2'b10 :
        begin
          coeffTableOut2 = 18'sb111111011111000100;
        end
      2'b11 :
        begin
          coeffTableOut2 = 18'sb111110110100111111;
        end
      default :
        begin
          coeffTableOut2 = 18'sb000000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP2_process
      if (enb) begin
        coeffTableRegP2_1 <= coeffTableOut2;
      end
    end



  // Coefficient table for multiplier1
  always @(rdAddr1) begin
    case ( rdAddr1)
      2'b00 :
        begin
          coeffTableOut1 = 18'sb000001100110111001;
        end
      2'b01 :
        begin
          coeffTableOut1 = 18'sb111110000001000011;
        end
      2'b10 :
        begin
          coeffTableOut1 = 18'sb111100111010110101;
        end
      2'b11 :
        begin
          coeffTableOut1 = 18'sb010100111011100100;
        end
      default :
        begin
          coeffTableOut1 = 18'sb000000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP1_process
      if (enb) begin
        coeffTableRegP1_1 <= coeffTableOut1;
      end
    end



  // Coefficient table for multiplier0
  always @(rdAddr0_1) begin
    case ( rdAddr0_1)
      2'b00 :
        begin
          coeffTableOut0 = 18'sb000000000110010011;
        end
      2'b01 :
        begin
          coeffTableOut0 = 18'sb000000001000110001;
        end
      2'b10 :
        begin
          coeffTableOut0 = 18'sb111111011100000000;
        end
      2'b11 :
        begin
          coeffTableOut0 = 18'sb000000001000011111;
        end
      default :
        begin
          coeffTableOut0 = 18'sb000000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP0_process
      if (enb) begin
        coeffTableRegP0_1 <= coeffTableOut0;
      end
    end



  assign sumIn = 36'sh000000000;



  FilterTapSystolic_block1 u_filterTap0 (.clk(clk),
                                         .enb(enb),
                                         .din_re(delayLineDataOut0),  // sfix18_En14
                                         .coeff(coeffTableRegP0_1),  // sfix18_En16
                                         .sumIn(sumIn),  // sfix36_En30
                                         .sumOut(sumOut)  // sfix36_En30
                                         );

  FilterTapSystolic_block1 u_filterTap1 (.clk(clk),
                                         .enb(enb),
                                         .din_re(delayLineDataOut1),  // sfix18_En14
                                         .coeff(coeffTableRegP1_1),  // sfix18_En16
                                         .sumIn(sumOut),  // sfix36_En30
                                         .sumOut(sumOut_0)  // sfix36_En30
                                         );

  FilterTapSystolic_block1 u_filterTap2 (.clk(clk),
                                         .enb(enb),
                                         .din_re(delayLineDataOut2),  // sfix18_En14
                                         .coeff(coeffTableRegP2_1),  // sfix18_En16
                                         .sumIn(sumOut_0),  // sfix36_En30
                                         .sumOut(sumOut_1)  // sfix36_En30
                                         );

  FilterTapSystolic_block1 u_filterTap3 (.clk(clk),
                                         .enb(enb),
                                         .din_re(delayLineDataOut3),  // sfix18_En14
                                         .coeff(coeffTableRegP3_1),  // sfix18_En16
                                         .sumIn(sumOut_1),  // sfix36_En30
                                         .sumOut(sumOut_2)  // sfix36_En30
                                         );

  always @(posedge clk or posedge reset)
    begin : sumOutReg_process
      if (reset == 1'b1) begin
        sumOutReg_1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          sumOutReg_1 <= sumOut_2;
        end
      end
    end



  assign accSwitchOut = (accumulate == 1'b0 ? accDataOut_1 :
              accDataOut);



  assign accAdderOut = accSwitchOut + sumOutReg_1;



  always @(posedge clk or posedge reset)
    begin : accDataOut_2_process
      if (reset == 1'b1) begin
        accDataOut_1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          accDataOut_1 <= accAdderOut;
        end
      end
    end



  assign converterOut = accDataOut_1[33:16];



  always @(posedge clk or posedge reset)
    begin : dout_re_process
      if (reset == 1'b1) begin
        dout_re_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb && validOutLookahead_1) begin
          dout_re_1 <= converterOut;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : validOutLookahead_2_process
      if (reset == 1'b1) begin
        validOutLookahead_reg_1[0] <= 1'b0;
        validOutLookahead_reg_1[1] <= 1'b0;
        validOutLookahead_reg_1[2] <= 1'b0;
        validOutLookahead_reg_1[3] <= 1'b0;
        validOutLookahead_reg_1[4] <= 1'b0;
        validOutLookahead_reg_1[5] <= 1'b0;
        validOutLookahead_reg_1[6] <= 1'b0;
      end
      else begin
        if (enb) begin
          validOutLookahead_reg_1[0] <= validOutLookahead_reg_next_1[0];
          validOutLookahead_reg_1[1] <= validOutLookahead_reg_next_1[1];
          validOutLookahead_reg_1[2] <= validOutLookahead_reg_next_1[2];
          validOutLookahead_reg_1[3] <= validOutLookahead_reg_next_1[3];
          validOutLookahead_reg_1[4] <= validOutLookahead_reg_next_1[4];
          validOutLookahead_reg_1[5] <= validOutLookahead_reg_next_1[5];
          validOutLookahead_reg_1[6] <= validOutLookahead_reg_next_1[6];
        end
      end
    end

  assign validOutLookahead_3 = validOutLookahead_reg_1[6];
  assign validOutLookahead_reg_next_1[0] = delayLineShiftEn3_1;
  assign validOutLookahead_reg_next_1[1] = validOutLookahead_reg_1[0];
  assign validOutLookahead_reg_next_1[2] = validOutLookahead_reg_1[1];
  assign validOutLookahead_reg_next_1[3] = validOutLookahead_reg_1[2];
  assign validOutLookahead_reg_next_1[4] = validOutLookahead_reg_1[3];
  assign validOutLookahead_reg_next_1[5] = validOutLookahead_reg_1[4];
  assign validOutLookahead_reg_next_1[6] = validOutLookahead_reg_1[5];



  assign rdAddrEndNonZero_1 = rdAddr3 != 2'b00;



  assign rdAddrEndZero_1 =  ~ rdAddrEndNonZero_1;



  always @(posedge clk or posedge reset)
    begin : finalSumValidPipe_1_process
      if (reset == 1'b1) begin
        finalSumValidPipe_reg_1[0] <= 1'b0;
        finalSumValidPipe_reg_1[1] <= 1'b0;
        finalSumValidPipe_reg_1[2] <= 1'b0;
        finalSumValidPipe_reg_1[3] <= 1'b0;
        finalSumValidPipe_reg_1[4] <= 1'b0;
        finalSumValidPipe_reg_1[5] <= 1'b0;
      end
      else begin
        if (enb) begin
          finalSumValidPipe_reg_1[0] <= finalSumValidPipe_reg_next_1[0];
          finalSumValidPipe_reg_1[1] <= finalSumValidPipe_reg_next_1[1];
          finalSumValidPipe_reg_1[2] <= finalSumValidPipe_reg_next_1[2];
          finalSumValidPipe_reg_1[3] <= finalSumValidPipe_reg_next_1[3];
          finalSumValidPipe_reg_1[4] <= finalSumValidPipe_reg_next_1[4];
          finalSumValidPipe_reg_1[5] <= finalSumValidPipe_reg_next_1[5];
        end
      end
    end

  assign accumulate_1 = finalSumValidPipe_reg_1[5];
  assign finalSumValidPipe_reg_next_1[0] = rdAddrEndZero_1;
  assign finalSumValidPipe_reg_next_1[1] = finalSumValidPipe_reg_1[0];
  assign finalSumValidPipe_reg_next_1[2] = finalSumValidPipe_reg_1[1];
  assign finalSumValidPipe_reg_next_1[3] = finalSumValidPipe_reg_1[2];
  assign finalSumValidPipe_reg_next_1[4] = finalSumValidPipe_reg_1[3];
  assign finalSumValidPipe_reg_next_1[5] = finalSumValidPipe_reg_1[4];



  assign accDataOut_3 = 36'sh000000000;



  Addressable_Delay_Line_block2 u_delayLine0_1 (.clk(clk),
                                                .reset(reset),
                                                .enb(enb),
                                                .dataIn(dinSM_im),  // sfix18_En14
                                                .wrEn(delayLineValidInP),
                                                .wrAddr(wrAddrP),  // ufix2
                                                .rdAddr(rdAddrDelayLine0),  // ufix2
                                                .delayLineEnd(delayLineEnd0_1),  // sfix18_En14
                                                .dataOut(delayLineDataOut0_1)  // sfix18_En14
                                                );

  always @(posedge clk or posedge reset)
    begin : delayLineDataIn1_2_process
      if (reset == 1'b1) begin
        delayLineDataIn1_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn1_3 <= delayLineEnd0_1;
        end
      end
    end



  Addressable_Delay_Line_block2 u_delayLine1_1 (.clk(clk),
                                                .reset(reset),
                                                .enb(enb),
                                                .dataIn(delayLineDataIn1_3),  // sfix18_En14
                                                .wrEn(delayLineShiftEn1_1),
                                                .wrAddr(wrAddr1),  // ufix2
                                                .rdAddr(rdAddrDelayLine1),  // ufix2
                                                .delayLineEnd(delayLineEnd1_1),  // sfix18_En14
                                                .dataOut(delayLineDataOut1_1)  // sfix18_En14
                                                );

  always @(posedge clk or posedge reset)
    begin : delayLineDataIn2_2_process
      if (reset == 1'b1) begin
        delayLineDataIn2_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn2_3 <= delayLineEnd1_1;
        end
      end
    end



  Addressable_Delay_Line_block2 u_delayLine2_1 (.clk(clk),
                                                .reset(reset),
                                                .enb(enb),
                                                .dataIn(delayLineDataIn2_3),  // sfix18_En14
                                                .wrEn(delayLineShiftEn2_1),
                                                .wrAddr(wrAddr2),  // ufix2
                                                .rdAddr(rdAddrDelayLine2),  // ufix2
                                                .delayLineEnd(delayLineEnd2_1),  // sfix18_En14
                                                .dataOut(delayLineDataOut2_1)  // sfix18_En14
                                                );

  always @(posedge clk or posedge reset)
    begin : delayLineDataIn3_2_process
      if (reset == 1'b1) begin
        delayLineDataIn3_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn3_3 <= delayLineEnd2_1;
        end
      end
    end



  Addressable_Delay_Line_block2 u_delayLine3_1 (.clk(clk),
                                                .reset(reset),
                                                .enb(enb),
                                                .dataIn(delayLineDataIn3_3),  // sfix18_En14
                                                .wrEn(delayLineShiftEn3_1),
                                                .wrAddr(wrAddr3),  // ufix2
                                                .rdAddr(rdAddrDelayLine3),  // ufix2
                                                .delayLineEnd(delayLineEnd3deadOut_1),  // sfix18_En14
                                                .dataOut(delayLineDataOut3_1)  // sfix18_En14
                                                );

  // Coefficient table for multiplier3
  always @(rdAddr3) begin
    case ( rdAddr3)
      2'b00 :
        begin
          coeffTableOut3_1 = 18'sb000000100011011011;
        end
      2'b01 :
        begin
          coeffTableOut3_1 = 18'sb000000001011110010;
        end
      2'b10 :
        begin
          coeffTableOut3_1 = 18'sb111111110011010010;
        end
      2'b11 :
        begin
          coeffTableOut3_1 = 18'sb000000000100110011;
        end
      default :
        begin
          coeffTableOut3_1 = 18'sb000000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP3_2_process
      if (enb) begin
        coeffTableRegP3_3 <= coeffTableOut3_1;
      end
    end



  // Coefficient table for multiplier2
  always @(rdAddr2) begin
    case ( rdAddr2)
      2'b00 :
        begin
          coeffTableOut2_1 = 18'sb111011101110111110;
        end
      2'b01 :
        begin
          coeffTableOut2_1 = 18'sb000100001001101110;
        end
      2'b10 :
        begin
          coeffTableOut2_1 = 18'sb111111011111000100;
        end
      2'b11 :
        begin
          coeffTableOut2_1 = 18'sb111110110100111111;
        end
      default :
        begin
          coeffTableOut2_1 = 18'sb000000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP2_2_process
      if (enb) begin
        coeffTableRegP2_3 <= coeffTableOut2_1;
      end
    end



  // Coefficient table for multiplier1
  always @(rdAddr1) begin
    case ( rdAddr1)
      2'b00 :
        begin
          coeffTableOut1_1 = 18'sb000001100110111001;
        end
      2'b01 :
        begin
          coeffTableOut1_1 = 18'sb111110000001000011;
        end
      2'b10 :
        begin
          coeffTableOut1_1 = 18'sb111100111010110101;
        end
      2'b11 :
        begin
          coeffTableOut1_1 = 18'sb010100111011100100;
        end
      default :
        begin
          coeffTableOut1_1 = 18'sb000000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP1_2_process
      if (enb) begin
        coeffTableRegP1_3 <= coeffTableOut1_1;
      end
    end



  // Coefficient table for multiplier0
  always @(rdAddr0_1) begin
    case ( rdAddr0_1)
      2'b00 :
        begin
          coeffTableOut0_1 = 18'sb000000000110010011;
        end
      2'b01 :
        begin
          coeffTableOut0_1 = 18'sb000000001000110001;
        end
      2'b10 :
        begin
          coeffTableOut0_1 = 18'sb111111011100000000;
        end
      2'b11 :
        begin
          coeffTableOut0_1 = 18'sb000000001000011111;
        end
      default :
        begin
          coeffTableOut0_1 = 18'sb000000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP0_2_process
      if (enb) begin
        coeffTableRegP0_3 <= coeffTableOut0_1;
      end
    end



  assign sumIn_1 = 36'sh000000000;



  FilterTapSystolic_block2 u_filterTap0_1 (.clk(clk),
                                           .enb(enb),
                                           .din_im(delayLineDataOut0_1),  // sfix18_En14
                                           .coeff(coeffTableRegP0_3),  // sfix18_En16
                                           .sumIn(sumIn_1),  // sfix36_En30
                                           .sumOut(sumOut_3)  // sfix36_En30
                                           );

  FilterTapSystolic_block2 u_filterTap1_1 (.clk(clk),
                                           .enb(enb),
                                           .din_im(delayLineDataOut1_1),  // sfix18_En14
                                           .coeff(coeffTableRegP1_3),  // sfix18_En16
                                           .sumIn(sumOut_3),  // sfix36_En30
                                           .sumOut(sumOut_0_1)  // sfix36_En30
                                           );

  FilterTapSystolic_block2 u_filterTap2_1 (.clk(clk),
                                           .enb(enb),
                                           .din_im(delayLineDataOut2_1),  // sfix18_En14
                                           .coeff(coeffTableRegP2_3),  // sfix18_En16
                                           .sumIn(sumOut_0_1),  // sfix36_En30
                                           .sumOut(sumOut_1_1)  // sfix36_En30
                                           );

  FilterTapSystolic_block2 u_filterTap3_1 (.clk(clk),
                                           .enb(enb),
                                           .din_im(delayLineDataOut3_1),  // sfix18_En14
                                           .coeff(coeffTableRegP3_3),  // sfix18_En16
                                           .sumIn(sumOut_1_1),  // sfix36_En30
                                           .sumOut(sumOut_2_1)  // sfix36_En30
                                           );

  always @(posedge clk or posedge reset)
    begin : sumOutReg_2_process
      if (reset == 1'b1) begin
        sumOutReg_3 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          sumOutReg_3 <= sumOut_2_1;
        end
      end
    end



  assign accSwitchOut_1 = (accumulate_1 == 1'b0 ? accDataOut_4 :
              accDataOut_3);



  assign accAdderOut_1 = accSwitchOut_1 + sumOutReg_3;



  always @(posedge clk or posedge reset)
    begin : accDataOut_5_process
      if (reset == 1'b1) begin
        accDataOut_4 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          accDataOut_4 <= accAdderOut_1;
        end
      end
    end



  assign converterOut_1 = accDataOut_4[33:16];



  always @(posedge clk or posedge reset)
    begin : dout_im_process
      if (reset == 1'b1) begin
        dout_im_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb && validOutLookahead_3) begin
          dout_im_1 <= converterOut_1;
        end
      end
    end



  assign dataZero = 18'sb000000000000000000;



  assign dataZero_dtc_re = dataZero;
  assign dataZero_dtc_im = 18'sb000000000000000000;



  assign dout_cmplxSW_re = (notValid == 1'b0 ? dout_re_1 :
              dataZero_dtc_re);
  assign dout_cmplxSW_im = (notValid == 1'b0 ? dout_im_1 :
              dataZero_dtc_im);



  assign dataOut_re = dout_cmplxSW_re;

  assign dataOut_im = dout_cmplxSW_im;

  assign validOut = vldOut_1;

endmodule  // FIRFilter2

