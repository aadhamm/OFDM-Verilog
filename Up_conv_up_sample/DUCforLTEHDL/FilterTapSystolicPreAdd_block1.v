// -------------------------------------------------------------
// 
// File Name: D:\OFDM\HDLImplementationOfDUCForLTEExample(Single Tone Output)\HDLImplementationOfDUCForLTEExample\hdlsrc\complex_upsampler\DUCforLTEHDL\FilterTapSystolicPreAdd_block1.v
// Created: 2023-05-25 17:45:33
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: FilterTapSystolicPreAdd_block1
// Source Path: DUCforLTEHDL/HDL_DUC/Lowpass Interpolator/DUCforLTEHDL/HDL_DUC/Lowpass Interpolator/FIRFilter1/FilterTapSystolicPreAdd
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module FilterTapSystolicPreAdd_block1
          (clk,
           enb,
           din_re,
           preAddIn,
           coeff,
           sumIn,
           sumOut);


  input   clk;
  input   enb;
  input   signed [15:0] din_re;  // sfix16_En15
  input   signed [15:0] preAddIn;  // sfix16_En15
  input   signed [15:0] coeff;  // sfix16_En15
  input   signed [32:0] sumIn;  // sfix33_En30
  output  signed [32:0] sumOut;  // sfix33_En30


  reg signed [15:0] fTap_din1_reg1;  // sfix16
  reg signed [15:0] fTap_din1_reg2;  // sfix16
  reg signed [15:0] fTap_din2_reg1;  // sfix16
  reg signed [16:0] fTap_preAdd_reg;  // sfix17
  reg signed [32:0] fTap_mult_reg;  // sfix33
  reg signed [32:0] fTap_addout_reg;  // sfix33
  reg signed [15:0] fTap_coef_reg1;  // sfix16
  reg signed [15:0] fTap_coef_reg2;  // sfix16
  wire signed [16:0] fTap_preAdd_reg_next;  // sfix17_En15
  wire signed [32:0] fTap_mult_reg_next;  // sfix33_En30
  wire signed [32:0] fTap_addout_reg_next;  // sfix33_En30
  wire signed [16:0] fTap_add_cast;  // sfix17_En15
  wire signed [16:0] fTap_add_cast_1;  // sfix17_En15

  initial begin
    fTap_din1_reg1 = 16'sb0000000000000000;
    fTap_din1_reg2 = 16'sb0000000000000000;
    fTap_din2_reg1 = 16'sb0000000000000000;
    fTap_preAdd_reg = 17'sb00000000000000000;
    fTap_coef_reg1 = 16'sb0000000000000000;
    fTap_coef_reg2 = 16'sb0000000000000000;
    fTap_mult_reg = 33'sh000000000;
    fTap_addout_reg = 33'sh000000000;
  end

  // FilterTapSystolicPreAddS
  always @(posedge clk)
    begin : fTap_process
      if (enb) begin
        fTap_preAdd_reg <= fTap_preAdd_reg_next;
        fTap_mult_reg <= fTap_mult_reg_next;
        fTap_addout_reg <= fTap_addout_reg_next;
        fTap_din1_reg2 <= fTap_din1_reg1;
        fTap_din1_reg1 <= din_re;
        fTap_din2_reg1 <= preAddIn;
        fTap_coef_reg2 <= fTap_coef_reg1;
        fTap_coef_reg1 <= coeff;
      end
    end

  assign sumOut = fTap_addout_reg;
  assign fTap_addout_reg_next = fTap_mult_reg + sumIn;
  assign fTap_mult_reg_next = fTap_preAdd_reg * fTap_coef_reg2;
  assign fTap_add_cast = {fTap_din1_reg2[15], fTap_din1_reg2};
  assign fTap_add_cast_1 = {fTap_din2_reg1[15], fTap_din2_reg1};
  assign fTap_preAdd_reg_next = fTap_add_cast + fTap_add_cast_1;



endmodule  // FilterTapSystolicPreAdd_block1

