// -------------------------------------------------------------
// 
// File Name: D:\OFDM\HDLImplementationOfDUCForLTEExample(Single Tone Output)\HDLImplementationOfDUCForLTEExample\hdlsrc\complex_upsampler\DUCforLTEHDL\HDL_DUC_tc.v
// Created: 2023-05-25 17:45:33
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_DUC_tc
// Source Path: HDL_DUC_tc
// Hierarchy Level: 1
// 
// Master clock enable input: clk_enable
// 
// enb         : identical to clk_enable
// enb_1_1_1   : identical to clk_enable
// enb_1_16_1  : 16x slower than clk with phase 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_DUC_tc
          (clk,
           reset,
           clk_enable,
           enb,
           enb_1_1_1,
           enb_1_16_1);


  input   clk;
  input   reset;
  input   clk_enable;
  output  enb;
  output  enb_1_1_1;
  output  enb_1_16_1;


  reg [3:0] count16;  // ufix4
  wire comp_1_tmp;
  wire phase_1_tmp;
  reg  phase_1;
  wire enb_1_16_1_1;


  assign enb = clk_enable;

  assign enb_1_1_1 = clk_enable;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 15
  always @(posedge clk or posedge reset)
    begin : counter_16_process
      if (reset == 1'b1) begin
        count16 <= 4'b0001;
      end
      else begin
        if (clk_enable) begin
          count16 <= count16 + 4'b0001;
        end
      end
    end



  assign comp_1_tmp = count16 == 4'b0000;



  assign phase_1_tmp = comp_1_tmp & clk_enable;



  always @(posedge clk or posedge reset)
    begin : phase_delay_process
      if (reset == 1'b1) begin
        phase_1 <= 1'b1;
      end
      else begin
        if (clk_enable) begin
          phase_1 <= phase_1_tmp;
        end
      end
    end



  assign enb_1_16_1_1 = phase_1 & clk_enable;



  assign enb_1_16_1 = enb_1_16_1_1;

endmodule  // HDL_DUC_tc

