// -------------------------------------------------------------
// 
// File Name: D:\OFDM\HDLImplementationOfDUCForLTEExample(Single Tone Output)\HDLImplementationOfDUCForLTEExample\hdlsrc\complex_upsampler\DUCforLTEHDL\NCO.v
// Created: 2023-05-25 17:45:34
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: NCO
// Source Path: DUCforLTEHDL/HDL_DUC/NCO
// Hierarchy Level: 1
// 
// NCO
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module NCO
          (clk,
           reset,
           enb,
           validIn,
           complexexp_re,
           complexexp_im);


  input   clk;
  input   reset;
  input   enb;
  input   validIn;
  output  signed [17:0] complexexp_re;  // sfix18_En16
  output  signed [17:0] complexexp_im;  // sfix18_En16


  reg  [0:4] outsel_reg_reg;  // ufix1 [5]
  wire [0:4] outsel_reg_reg_next;  // ufix1 [5]
  wire outsel;
  wire signed [17:0] outzero_re;  // sfix18_En16
  wire signed [17:0] outzero_im;  // sfix18_En16
  wire signed [21:0] const0;  // sfix22
  wire signed [21:0] pInc;  // sfix22
  wire signed [21:0] validPInc;  // sfix22
  reg signed [21:0] accphase_reg;  // sfix22
  wire signed [21:0] addpInc;  // sfix22
  wire signed [21:0] pOffset;  // sfix22
  wire signed [21:0] accoffset;  // sfix22
  reg signed [21:0] accoffsete_reg;  // sfix22
  wire [9:0] dither;  // ufix10
  wire signed [21:0] casteddither;  // sfix22
  reg signed [21:0] dither_reg;  // sfix22
  wire signed [21:0] accumulator;  // sfix22
  wire [11:0] accQuantized;  // ufix12_E10
  wire signed [17:0] outs_re;  // sfix18_En16
  wire signed [17:0] outs_im;  // sfix18_En16
  wire signed [17:0] validouts_re;  // sfix18_En16
  wire signed [17:0] validouts_im;  // sfix18_En16
  reg signed [17:0] complexexp_re_1;  // sfix18_En16
  reg signed [17:0] complexexp_im_1;  // sfix18_En16


  always @(posedge clk or posedge reset)
    begin : outsel_reg_process
      if (reset == 1'b1) begin
        outsel_reg_reg[0] <= 1'b0;
        outsel_reg_reg[1] <= 1'b0;
        outsel_reg_reg[2] <= 1'b0;
        outsel_reg_reg[3] <= 1'b0;
        outsel_reg_reg[4] <= 1'b0;
      end
      else begin
        if (enb) begin
          outsel_reg_reg[0] <= outsel_reg_reg_next[0];
          outsel_reg_reg[1] <= outsel_reg_reg_next[1];
          outsel_reg_reg[2] <= outsel_reg_reg_next[2];
          outsel_reg_reg[3] <= outsel_reg_reg_next[3];
          outsel_reg_reg[4] <= outsel_reg_reg_next[4];
        end
      end
    end

  assign outsel = outsel_reg_reg[4];
  assign outsel_reg_reg_next[0] = validIn;
  assign outsel_reg_reg_next[1] = outsel_reg_reg[0];
  assign outsel_reg_reg_next[2] = outsel_reg_reg[1];
  assign outsel_reg_reg_next[3] = outsel_reg_reg[2];
  assign outsel_reg_reg_next[4] = outsel_reg_reg[3];



  assign outzero_re = 18'sb000000000000000000;
  assign outzero_im = 18'sb000000000000000000;



  // Constant Zero
  assign const0 = 22'sb0000000000000000000000;



  assign pInc = 22'sb0000101010000000000000;



  assign validPInc = (validIn == 1'b0 ? const0 :
              pInc);



  // Add phase increment
  assign addpInc = accphase_reg + validPInc;



  // Phase increment accumulator register
  always @(posedge clk or posedge reset)
    begin : AccPhaseRegister_process
      if (reset == 1'b1) begin
        accphase_reg <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb) begin
          accphase_reg <= addpInc;
        end
      end
    end



  assign pOffset = 22'sb0000000000000000000000;



  // Add phase offset
  assign accoffset = accphase_reg + pOffset;



  // Phase offset accumulator register
  always @(posedge clk or posedge reset)
    begin : AccOffsetRegister_process
      if (reset == 1'b1) begin
        accoffsete_reg <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb) begin
          accoffsete_reg <= accoffset;
        end
      end
    end



  DitherGen u_dither_inst (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .validIn(validIn),
                           .dither(dither)  // ufix10
                           );

  assign casteddither = {12'b0, dither};



  // Dither input register
  always @(posedge clk or posedge reset)
    begin : DitherRegister_process
      if (reset == 1'b1) begin
        dither_reg <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb) begin
          dither_reg <= casteddither;
        end
      end
    end



  // Add dither
  assign accumulator = accoffsete_reg + dither_reg;



  // Phase quantization
  assign accQuantized = accumulator[21:10];



  WaveformGen u_Wave_inst (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .phaseIdx(accQuantized),  // ufix12_E10
                           .exp_re(outs_re),  // sfix18_En16
                           .exp_im(outs_im)  // sfix18_En16
                           );

  assign validouts_re = (outsel == 1'b0 ? outzero_re :
              outs_re);
  assign validouts_im = (outsel == 1'b0 ? outzero_im :
              outs_im);



  // Output register
  always @(posedge clk or posedge reset)
    begin : OutputRegister_process
      if (reset == 1'b1) begin
        complexexp_re_1 <= 18'sb000000000000000000;
        complexexp_im_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          complexexp_re_1 <= validouts_re;
          complexexp_im_1 <= validouts_im;
        end
      end
    end



  assign complexexp_re = complexexp_re_1;

  assign complexexp_im = complexexp_im_1;

endmodule  // NCO

