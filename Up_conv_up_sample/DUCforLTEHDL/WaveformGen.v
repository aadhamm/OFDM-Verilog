// -------------------------------------------------------------
// 
// File Name: D:\OFDM\HDLImplementationOfDUCForLTEExample(Single Tone Output)\HDLImplementationOfDUCForLTEExample\hdlsrc\complex_upsampler\DUCforLTEHDL\WaveformGen.v
// Created: 2023-05-25 17:45:34
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: WaveformGen
// Source Path: DUCforLTEHDL/HDL_DUC/NCO/WaveformGen
// Hierarchy Level: 2
// 
// Wave form Generation Component
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module WaveformGen
          (clk,
           reset,
           enb,
           phaseIdx,
           exp_re,
           exp_im);


  input   clk;
  input   reset;
  input   enb;
  input   [11:0] phaseIdx;  // ufix12_E10
  output  signed [17:0] exp_re;  // sfix18_En16
  output  signed [17:0] exp_im;  // sfix18_En16


  reg [11:0] phaseIdxReg;  // ufix12_E10
  wire selsign;  // ufix1
  wire seladdr;  // ufix1
  wire selsign_cos;  // ufix1
  reg  [0:2] SelsignCosRegister_reg;  // ufix1 [3]
  wire [0:2] SelsignCosRegister_reg_next;  // ufix1 [3]
  wire selsign_cosreg;  // ufix1
  wire [10:0] lutaddrexd;  // ufix11
  wire addreqzero;  // ufix1
  reg  validcnt;  // ufix1
  wire validEnb;  // ufix1
  wire enbreg;  // ufix1
  wire addrOverFcos;  // ufix1
  reg  [0:2] AddrOverFcosRegister_reg;  // ufix1 [3]
  wire [0:2] AddrOverFcosRegister_reg_next;  // ufix1 [3]
  wire addrOverFcosreg;  // ufix1
  wire [10:0] lutaddrmax;  // ufix11
  wire [9:0] lutaddr1;  // ufix10
  wire [11:0] subtractor_sub_temp;  // ufix12
  wire [11:0] subtractor_1;  // ufix12
  wire [11:0] subtractor_2;  // ufix12
  wire [9:0] lutaddr2;  // ufix10
  wire [9:0] lutaddrcos;  // ufix10
  wire signed [17:0] lutoutcos;  // sfix18_En16
  wire signed [17:0] ampOne;  // sfix18_En16
  wire signed [17:0] lutoutcos_ampOne;  // sfix18_En16
  wire signed [18:0] uminus_cast;  // sfix19_En16
  wire signed [18:0] uminus_cast_1;  // sfix19_En16
  wire signed [17:0] lutoutcos_ampOne_inv;  // sfix18_En16
  wire signed [17:0] cosout;  // sfix18_En16
  reg  [0:2] SelsignRegister_reg;  // ufix1 [3]
  wire [0:2] SelsignRegister_reg_next;  // ufix1 [3]
  wire selsignreg;  // ufix1
  wire addrOverFsin;  // ufix1
  reg  [0:2] AddrOverFsinRegister_reg;  // ufix1 [3]
  wire [0:2] AddrOverFsinRegister_reg_next;  // ufix1 [3]
  wire addrOverFsinreg;  // ufix1
  wire [9:0] lutaddrsin;  // ufix10
  wire signed [17:0] lutoutsin;  // sfix18_En16
  wire signed [17:0] lutoutsin_ampOne;  // sfix18_En16
  wire signed [18:0] uminus_cast_2;  // sfix19_En16
  wire signed [18:0] uminus_cast_3;  // sfix19_En16
  wire signed [17:0] lutoutsin_ampOne_inv;  // sfix18_En16
  wire signed [17:0] sinout;  // sfix18_En16


  always @(posedge clk or posedge reset)
    begin : phaseIdxRegister_process
      if (reset == 1'b1) begin
        phaseIdxReg <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          phaseIdxReg <= phaseIdx;
        end
      end
    end



  // Sine sign selection signal
  assign selsign = phaseIdxReg[11];



  assign seladdr = phaseIdxReg[10];



  // Cosine sign selection signal
  assign selsign_cos = selsign ^ seladdr;



  always @(posedge clk or posedge reset)
    begin : SelsignCosRegister_process
      if (reset == 1'b1) begin
        SelsignCosRegister_reg[0] <= 1'b0;
        SelsignCosRegister_reg[1] <= 1'b0;
        SelsignCosRegister_reg[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          SelsignCosRegister_reg[0] <= SelsignCosRegister_reg_next[0];
          SelsignCosRegister_reg[1] <= SelsignCosRegister_reg_next[1];
          SelsignCosRegister_reg[2] <= SelsignCosRegister_reg_next[2];
        end
      end
    end

  assign selsign_cosreg = SelsignCosRegister_reg[2];
  assign SelsignCosRegister_reg_next[0] = selsign_cos;
  assign SelsignCosRegister_reg_next[1] = SelsignCosRegister_reg[0];
  assign SelsignCosRegister_reg_next[2] = SelsignCosRegister_reg[1];



  // Get extended LUT address for overflow handling
  assign lutaddrexd = phaseIdxReg[10:0];



  // Detect cosine overflow
  assign addreqzero = lutaddrexd == 11'b00000000000;



  assign validEnb = validcnt < 1'b1;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1
  always @(posedge clk or posedge reset)
    begin : counter_process
      if (reset == 1'b1) begin
        validcnt <= 1'b0;
      end
      else begin
        if (enb && validEnb) begin
          validcnt <=  ~ validcnt;
        end
      end
    end



  assign enbreg = validcnt == 1'b1;



  assign addrOverFcos = addreqzero & enbreg;



  always @(posedge clk or posedge reset)
    begin : AddrOverFcosRegister_process
      if (reset == 1'b1) begin
        AddrOverFcosRegister_reg[0] <= 1'b0;
        AddrOverFcosRegister_reg[1] <= 1'b0;
        AddrOverFcosRegister_reg[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          AddrOverFcosRegister_reg[0] <= AddrOverFcosRegister_reg_next[0];
          AddrOverFcosRegister_reg[1] <= AddrOverFcosRegister_reg_next[1];
          AddrOverFcosRegister_reg[2] <= AddrOverFcosRegister_reg_next[2];
        end
      end
    end

  assign addrOverFcosreg = AddrOverFcosRegister_reg[2];
  assign AddrOverFcosRegister_reg_next[0] = addrOverFcos;
  assign AddrOverFcosRegister_reg_next[1] = AddrOverFcosRegister_reg[0];
  assign AddrOverFcosRegister_reg_next[2] = AddrOverFcosRegister_reg[1];



  // Map LUT address in correct phase
  assign lutaddrmax = 11'b10000000000;



  assign lutaddr1 = phaseIdxReg[9:0];



  assign subtractor_1 = {1'b0, lutaddrmax};
  assign subtractor_2 = {2'b0, lutaddr1};
  assign subtractor_sub_temp = subtractor_1 - subtractor_2;
  assign lutaddr2 = subtractor_sub_temp[9:0];



  assign lutaddrcos = (seladdr == 1'b0 ? lutaddr2 :
              lutaddr1);



  LookUpTableGen u_CosineWave_inst (.clk(clk),
                                    .enb(enb),
                                    .lutaddr(lutaddrcos),  // ufix10
                                    .lutoutput(lutoutcos)  // sfix18_En16
                                    );

  assign ampOne = 18'sb010000000000000000;



  // Assign cosine amplitude One
  assign lutoutcos_ampOne = (addrOverFcosreg == 1'b0 ? lutoutcos :
              ampOne);



  assign uminus_cast = {lutoutcos_ampOne[17], lutoutcos_ampOne};
  assign uminus_cast_1 =  - (uminus_cast);
  assign lutoutcos_ampOne_inv = uminus_cast_1[17:0];



  // Select sign of cosine output
  assign cosout = (selsign_cosreg == 1'b0 ? lutoutcos_ampOne :
              lutoutcos_ampOne_inv);



  assign exp_re = cosout;

  always @(posedge clk or posedge reset)
    begin : SelsignRegister_process
      if (reset == 1'b1) begin
        SelsignRegister_reg[0] <= 1'b0;
        SelsignRegister_reg[1] <= 1'b0;
        SelsignRegister_reg[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          SelsignRegister_reg[0] <= SelsignRegister_reg_next[0];
          SelsignRegister_reg[1] <= SelsignRegister_reg_next[1];
          SelsignRegister_reg[2] <= SelsignRegister_reg_next[2];
        end
      end
    end

  assign selsignreg = SelsignRegister_reg[2];
  assign SelsignRegister_reg_next[0] = selsign;
  assign SelsignRegister_reg_next[1] = SelsignRegister_reg[0];
  assign SelsignRegister_reg_next[2] = SelsignRegister_reg[1];



  // Detect sine overflow
  assign addrOverFsin = lutaddrexd == 11'b10000000000;



  always @(posedge clk or posedge reset)
    begin : AddrOverFsinRegister_process
      if (reset == 1'b1) begin
        AddrOverFsinRegister_reg[0] <= 1'b0;
        AddrOverFsinRegister_reg[1] <= 1'b0;
        AddrOverFsinRegister_reg[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          AddrOverFsinRegister_reg[0] <= AddrOverFsinRegister_reg_next[0];
          AddrOverFsinRegister_reg[1] <= AddrOverFsinRegister_reg_next[1];
          AddrOverFsinRegister_reg[2] <= AddrOverFsinRegister_reg_next[2];
        end
      end
    end

  assign addrOverFsinreg = AddrOverFsinRegister_reg[2];
  assign AddrOverFsinRegister_reg_next[0] = addrOverFsin;
  assign AddrOverFsinRegister_reg_next[1] = AddrOverFsinRegister_reg[0];
  assign AddrOverFsinRegister_reg_next[2] = AddrOverFsinRegister_reg[1];



  assign lutaddrsin = (seladdr == 1'b0 ? lutaddr1 :
              lutaddr2);



  LookUpTableGen u_SineWave_inst (.clk(clk),
                                  .enb(enb),
                                  .lutaddr(lutaddrsin),  // ufix10
                                  .lutoutput(lutoutsin)  // sfix18_En16
                                  );

  // Assign sine amplitude One
  assign lutoutsin_ampOne = (addrOverFsinreg == 1'b0 ? lutoutsin :
              ampOne);



  assign uminus_cast_2 = {lutoutsin_ampOne[17], lutoutsin_ampOne};
  assign uminus_cast_3 =  - (uminus_cast_2);
  assign lutoutsin_ampOne_inv = uminus_cast_3[17:0];



  // Select sign of Sine output
  assign sinout = (selsignreg == 1'b0 ? lutoutsin_ampOne :
              lutoutsin_ampOne_inv);



  assign exp_im = sinout;

endmodule  // WaveformGen

