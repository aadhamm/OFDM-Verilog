// -------------------------------------------------------------
// 
// File Name: D:\OFDM\HDLImplementationOfDUCForLTEExample(Single Tone Output)\HDLImplementationOfDUCForLTEExample\hdlsrc\complex_upsampler\DUCforLTEHDL\cSection.v
// Created: 2023-05-25 17:45:33
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: cSection
// Source Path: DUCforLTEHDL/HDL_DUC/CICInterpolator/cSection
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module cSection
          (clk,
           reset,
           enb,
           rdyout_re,
           rdyout_im,
           rdy_valid,
           internalReset,
           combOut_re,
           combOut_im,
           c_vout);


  input   clk;
  input   reset;
  input   enb;
  input   signed [18:0] rdyout_re;  // sfix19_En14
  input   signed [18:0] rdyout_im;  // sfix19_En14
  input   rdy_valid;
  input   internalReset;
  output  signed [19:0] combOut_re;  // sfix20_En14
  output  signed [19:0] combOut_im;  // sfix20_En14
  output  c_vout;


  reg  cBuff_vout1;
  reg  cBuff_vout2;
  reg  cBuff_vout3;
  wire signed [19:0] invalidOut_re_1;  // sfix20_En14
  reg signed [18:0] cDelay_re1;  // sfix19_En14
  wire signed [19:0] subtractor_sub_cast;  // sfix20_En14
  wire signed [19:0] subtractor_sub_cast_1;  // sfix20_En14
  wire signed [19:0] subOut_re1;  // sfix20_En14
  wire signed [18:0] cOut_re1;  // sfix19_En14
  reg signed [18:0] cBuff_re1;  // sfix19_En14
  wire signed [19:0] cIn_re2;  // sfix20_En14
  reg signed [19:0] cDelay_re2;  // sfix20_En14
  wire signed [20:0] subtractor_sub_cast_2;  // sfix21_En14
  wire signed [20:0] subtractor_sub_cast_3;  // sfix21_En14
  wire signed [20:0] subOut_re2;  // sfix21_En14
  wire signed [19:0] cOut_re2;  // sfix20_En14
  reg signed [19:0] cBuff_re2;  // sfix20_En14
  reg signed [19:0] cDelay_re3;  // sfix20_En14
  wire signed [20:0] subtractor_sub_cast_4;  // sfix21_En14
  wire signed [20:0] subtractor_sub_cast_5;  // sfix21_En14
  wire signed [20:0] subOut_re3;  // sfix21_En14
  wire signed [19:0] cOut_re3;  // sfix20_En14
  reg signed [19:0] cBuff_re3;  // sfix20_En14
  wire signed [19:0] combOutreg_re;  // sfix20_En14
  reg signed [19:0] combOut_re_1;  // sfix20_En14
  wire signed [19:0] invalidOut_im_1;  // sfix20_En14
  reg signed [18:0] cDelay_im1;  // sfix19_En14
  wire signed [19:0] subtractor_sub_cast_6;  // sfix20_En14
  wire signed [19:0] subtractor_sub_cast_7;  // sfix20_En14
  wire signed [19:0] subOut_im1;  // sfix20_En14
  wire signed [18:0] cOut_im1;  // sfix19_En14
  reg signed [18:0] cBuff_im1;  // sfix19_En14
  wire signed [19:0] cIn_im2;  // sfix20_En14
  reg signed [19:0] cDelay_im2;  // sfix20_En14
  wire signed [20:0] subtractor_sub_cast_8;  // sfix21_En14
  wire signed [20:0] subtractor_sub_cast_9;  // sfix21_En14
  wire signed [20:0] subOut_im2;  // sfix21_En14
  wire signed [19:0] cOut_im2;  // sfix20_En14
  reg signed [19:0] cBuff_im2;  // sfix20_En14
  reg signed [19:0] cDelay_im3;  // sfix20_En14
  wire signed [20:0] subtractor_sub_cast_10;  // sfix21_En14
  wire signed [20:0] subtractor_sub_cast_11;  // sfix21_En14
  wire signed [20:0] subOut_im3;  // sfix21_En14
  wire signed [19:0] cOut_im3;  // sfix20_En14
  reg signed [19:0] cBuff_im3;  // sfix20_En14
  wire signed [19:0] combOutreg_im;  // sfix20_En14
  reg signed [19:0] combOut_im_1;  // sfix20_En14
  reg  c_vout_1;


  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        cBuff_vout1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            cBuff_vout1 <= 1'b0;
          end
          else begin
            cBuff_vout1 <= rdy_valid;
          end
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        cBuff_vout2 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            cBuff_vout2 <= 1'b0;
          end
          else begin
            cBuff_vout2 <= cBuff_vout1;
          end
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        cBuff_vout3 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            cBuff_vout3 <= 1'b0;
          end
          else begin
            cBuff_vout3 <= cBuff_vout2;
          end
        end
      end
    end



  assign invalidOut_re_1 = 20'sb00000000000000000000;



  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        cDelay_re1 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            cDelay_re1 <= 19'sb0000000000000000000;
          end
          else begin
            if (rdy_valid) begin
              cDelay_re1 <= rdyout_re;
            end
          end
        end
      end
    end



  assign subtractor_sub_cast = {rdyout_re[18], rdyout_re};
  assign subtractor_sub_cast_1 = {cDelay_re1[18], cDelay_re1};
  assign subOut_re1 = subtractor_sub_cast - subtractor_sub_cast_1;



  assign cOut_re1 = subOut_re1[18:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        cBuff_re1 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            cBuff_re1 <= 19'sb0000000000000000000;
          end
          else begin
            cBuff_re1 <= cOut_re1;
          end
        end
      end
    end



  assign cIn_re2 = {cBuff_re1[18], cBuff_re1};



  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        cDelay_re2 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            cDelay_re2 <= 20'sb00000000000000000000;
          end
          else begin
            if (cBuff_vout1) begin
              cDelay_re2 <= cIn_re2;
            end
          end
        end
      end
    end



  assign subtractor_sub_cast_2 = {cIn_re2[19], cIn_re2};
  assign subtractor_sub_cast_3 = {cDelay_re2[19], cDelay_re2};
  assign subOut_re2 = subtractor_sub_cast_2 - subtractor_sub_cast_3;



  assign cOut_re2 = subOut_re2[19:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        cBuff_re2 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            cBuff_re2 <= 20'sb00000000000000000000;
          end
          else begin
            cBuff_re2 <= cOut_re2;
          end
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        cDelay_re3 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            cDelay_re3 <= 20'sb00000000000000000000;
          end
          else begin
            if (cBuff_vout2) begin
              cDelay_re3 <= cBuff_re2;
            end
          end
        end
      end
    end



  assign subtractor_sub_cast_4 = {cBuff_re2[19], cBuff_re2};
  assign subtractor_sub_cast_5 = {cDelay_re3[19], cDelay_re3};
  assign subOut_re3 = subtractor_sub_cast_4 - subtractor_sub_cast_5;



  assign cOut_re3 = subOut_re3[19:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_8_process
      if (reset == 1'b1) begin
        cBuff_re3 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            cBuff_re3 <= 20'sb00000000000000000000;
          end
          else begin
            cBuff_re3 <= cOut_re3;
          end
        end
      end
    end



  assign combOutreg_re = (cBuff_vout3 == 1'b0 ? invalidOut_re_1 :
              cBuff_re3);



  always @(posedge clk or posedge reset)
    begin : intdelay_9_process
      if (reset == 1'b1) begin
        combOut_re_1 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            combOut_re_1 <= 20'sb00000000000000000000;
          end
          else begin
            combOut_re_1 <= combOutreg_re;
          end
        end
      end
    end



  assign invalidOut_im_1 = 20'sb00000000000000000000;



  always @(posedge clk or posedge reset)
    begin : intdelay_10_process
      if (reset == 1'b1) begin
        cDelay_im1 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            cDelay_im1 <= 19'sb0000000000000000000;
          end
          else begin
            if (rdy_valid) begin
              cDelay_im1 <= rdyout_im;
            end
          end
        end
      end
    end



  assign subtractor_sub_cast_6 = {rdyout_im[18], rdyout_im};
  assign subtractor_sub_cast_7 = {cDelay_im1[18], cDelay_im1};
  assign subOut_im1 = subtractor_sub_cast_6 - subtractor_sub_cast_7;



  assign cOut_im1 = subOut_im1[18:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_11_process
      if (reset == 1'b1) begin
        cBuff_im1 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            cBuff_im1 <= 19'sb0000000000000000000;
          end
          else begin
            cBuff_im1 <= cOut_im1;
          end
        end
      end
    end



  assign cIn_im2 = {cBuff_im1[18], cBuff_im1};



  always @(posedge clk or posedge reset)
    begin : intdelay_12_process
      if (reset == 1'b1) begin
        cDelay_im2 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            cDelay_im2 <= 20'sb00000000000000000000;
          end
          else begin
            if (cBuff_vout1) begin
              cDelay_im2 <= cIn_im2;
            end
          end
        end
      end
    end



  assign subtractor_sub_cast_8 = {cIn_im2[19], cIn_im2};
  assign subtractor_sub_cast_9 = {cDelay_im2[19], cDelay_im2};
  assign subOut_im2 = subtractor_sub_cast_8 - subtractor_sub_cast_9;



  assign cOut_im2 = subOut_im2[19:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_13_process
      if (reset == 1'b1) begin
        cBuff_im2 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            cBuff_im2 <= 20'sb00000000000000000000;
          end
          else begin
            cBuff_im2 <= cOut_im2;
          end
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_14_process
      if (reset == 1'b1) begin
        cDelay_im3 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            cDelay_im3 <= 20'sb00000000000000000000;
          end
          else begin
            if (cBuff_vout2) begin
              cDelay_im3 <= cBuff_im2;
            end
          end
        end
      end
    end



  assign subtractor_sub_cast_10 = {cBuff_im2[19], cBuff_im2};
  assign subtractor_sub_cast_11 = {cDelay_im3[19], cDelay_im3};
  assign subOut_im3 = subtractor_sub_cast_10 - subtractor_sub_cast_11;



  assign cOut_im3 = subOut_im3[19:0];



  always @(posedge clk or posedge reset)
    begin : intdelay_15_process
      if (reset == 1'b1) begin
        cBuff_im3 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            cBuff_im3 <= 20'sb00000000000000000000;
          end
          else begin
            cBuff_im3 <= cOut_im3;
          end
        end
      end
    end



  assign combOutreg_im = (cBuff_vout3 == 1'b0 ? invalidOut_im_1 :
              cBuff_im3);



  always @(posedge clk or posedge reset)
    begin : intdelay_16_process
      if (reset == 1'b1) begin
        combOut_im_1 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            combOut_im_1 <= 20'sb00000000000000000000;
          end
          else begin
            combOut_im_1 <= combOutreg_im;
          end
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_17_process
      if (reset == 1'b1) begin
        c_vout_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            c_vout_1 <= 1'b0;
          end
          else begin
            c_vout_1 <= cBuff_vout3;
          end
        end
      end
    end



  assign combOut_re = combOut_re_1;

  assign combOut_im = combOut_im_1;

  assign c_vout = c_vout_1;

endmodule  // cSection

