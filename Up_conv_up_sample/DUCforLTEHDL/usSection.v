// -------------------------------------------------------------
// 
// File Name: D:\OFDM\HDLImplementationOfDUCForLTEExample(Single Tone Output)\HDLImplementationOfDUCForLTEExample\hdlsrc\complex_upsampler\DUCforLTEHDL\usSection.v
// Created: 2023-05-25 17:45:33
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: usSection
// Source Path: DUCforLTEHDL/HDL_DUC/CICInterpolator/usSection
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module usSection
          (clk,
           reset,
           enb,
           combOut_re,
           combOut_im,
           c_vout,
           upsampleVal,
           i_rstout,
           usOut_re,
           usOut_im,
           us_vout);


  input   clk;
  input   reset;
  input   enb;
  input   signed [19:0] combOut_re;  // sfix20_En14
  input   signed [19:0] combOut_im;  // sfix20_En14
  input   c_vout;
  input   [11:0] upsampleVal;  // ufix12
  input   i_rstout;
  output  signed [19:0] usOut_re;  // sfix20_En14
  output  signed [19:0] usOut_im;  // sfix20_En14
  output  us_vout;


  reg [2:0] upSampler_count;  // ufix3
  reg signed [19:0] upSampler_dataOutReg_re;  // sfix20
  reg signed [19:0] upSampler_dataOutReg_im;  // sfix20
  reg  upSampler_validOutReg;
  reg [2:0] upSampler_count_next;  // ufix3
  reg signed [19:0] upSampler_dataOutReg_re_next;  // sfix20_En14
  reg signed [19:0] upSampler_dataOutReg_im_next;  // sfix20_En14
  reg  upSampler_validOutReg_next;
  reg signed [19:0] usOut_re_1;  // sfix20_En14
  reg signed [19:0] usOut_im_1;  // sfix20_En14
  reg  us_vout_1;
  reg [2:0] upSampler_count_temp;  // ufix3
  reg  upSampler_validOutReg_temp;
  reg [12:0] upSampler_t_0_0;  // ufix13
  reg [12:0] upSampler_t_1;  // ufix13


  always @(posedge clk or posedge reset)
    begin : upSampler_process
      if (reset == 1'b1) begin
        upSampler_count <= 3'b000;
        upSampler_dataOutReg_re <= 20'sb00000000000000000000;
        upSampler_dataOutReg_im <= 20'sb00000000000000000000;
        upSampler_validOutReg <= 1'b0;
      end
      else begin
        if (enb) begin
          upSampler_count <= upSampler_count_next;
          upSampler_dataOutReg_re <= upSampler_dataOutReg_re_next;
          upSampler_dataOutReg_im <= upSampler_dataOutReg_im_next;
          upSampler_validOutReg <= upSampler_validOutReg_next;
        end
      end
    end

  always @(c_vout, combOut_im, combOut_re, i_rstout, upSampler_count,
       upSampler_dataOutReg_im, upSampler_dataOutReg_re, upSampler_validOutReg) begin
    upSampler_t_0_0 = 13'b0000000000000;
    upSampler_t_1 = 13'b0000000000000;
    upSampler_count_temp = upSampler_count;
    upSampler_validOutReg_temp = upSampler_validOutReg;
    upSampler_dataOutReg_re_next = upSampler_dataOutReg_re;
    upSampler_dataOutReg_im_next = upSampler_dataOutReg_im;
    if (i_rstout != 1'b0) begin
      upSampler_dataOutReg_re_next = 20'sb00000000000000000000;
      upSampler_dataOutReg_im_next = 20'sb00000000000000000000;
      upSampler_validOutReg_temp = 1'b0;
    end
    else if (c_vout != 1'b0) begin
      upSampler_dataOutReg_re_next = combOut_re;
      upSampler_dataOutReg_im_next = combOut_im;
    end
    else if (upSampler_validOutReg) begin
      upSampler_dataOutReg_re_next = 20'sb00000000000000000000;
      upSampler_dataOutReg_im_next = 20'sb00000000000000000000;
    end
    if (i_rstout != 1'b0) begin
      upSampler_count_temp = 3'b000;
    end
    else if (c_vout != 1'b0) begin
      upSampler_validOutReg_temp = 1'b1;
    end
    else begin
      upSampler_t_0_0 = {10'b0, upSampler_count};
      if (upSampler_t_0_0 == 13'b0000000000001) begin
        upSampler_validOutReg_temp = 1'b0;
      end
    end
    if (i_rstout != 1'b0) begin
      upSampler_count_temp = 3'b000;
    end
    else if (c_vout != 1'b0) begin
      upSampler_count_temp = 3'b000;
    end
    else if (upSampler_validOutReg_temp) begin
      upSampler_t_1 = {10'b0, upSampler_count_temp};
      if (upSampler_t_1 < 13'b0000000000001) begin
        upSampler_count_temp = upSampler_count_temp + 3'b001;
      end
      else begin
        upSampler_count_temp = 3'b000;
      end
    end
    usOut_re_1 = upSampler_dataOutReg_re;
    usOut_im_1 = upSampler_dataOutReg_im;
    us_vout_1 = upSampler_validOutReg;
    upSampler_count_next = upSampler_count_temp;
    upSampler_validOutReg_next = upSampler_validOutReg_temp;
  end



  assign usOut_re = usOut_re_1;

  assign usOut_im = usOut_im_1;

  assign us_vout = us_vout_1;

endmodule  // usSection

